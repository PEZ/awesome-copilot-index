{
  "generated" : "2025-07-11T06:07:37.078094978Z",
  "cursor-rules" : [ {
    "description" : "Interaction with AI models. Used to minimize AI generated comments and focus on clear code",
    "tech-stack" : "Next.js TS/TypeScript Tailwind",
    "domain" : "Ai Interaction Guidelines",
    "link" : "rules/nextjs-typescript-tailwind-cursorrules-prompt-file/ai-interaction-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces TypeScript best practices and coding standards for all TypeScript files in the project.",
    "tech-stack" : "Next.js TS/TypeScript Tailwind",
    "domain" : "General Typescript Guidelines",
    "link" : "rules/nextjs-typescript-tailwind-cursorrules-prompt-file/general-typescript-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies to Next.js app directory, ensuring routing conventions and best practices are followed.",
    "tech-stack" : "Next.js TS/TypeScript Tailwind",
    "domain" : "Next Js App Routing Guidelines",
    "link" : "rules/nextjs-typescript-tailwind-cursorrules-prompt-file/next-js-app-routing-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Focuses on reusable, responsive, and accessible React components within the components directory.",
    "tech-stack" : "Next.js TS/TypeScript Tailwind",
    "domain" : "React Component Guidelines",
    "link" : "rules/nextjs-typescript-tailwind-cursorrules-prompt-file/react-component-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for custom React hooks, emphasizing state management best practices.",
    "tech-stack" : "Next.js TS/TypeScript Tailwind",
    "domain" : "React Hook Guidelines",
    "link" : "rules/nextjs-typescript-tailwind-cursorrules-prompt-file/react-hook-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforce specific directory structure for React and MobX Projects.",
    "tech-stack" : "React Mobx",
    "domain" : "Folder Structure",
    "link" : "rules/react-mobx-cursorrules-prompt-file/folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Adhere to MobX best practices for scalable state management.",
    "tech-stack" : "React Mobx",
    "domain" : "Mobx Best Practices",
    "link" : "rules/react-mobx-cursorrules-prompt-file/mobx-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Implement proper dependency injection for stores.",
    "tech-stack" : "React Mobx",
    "domain" : "Mobx Dependency Injection",
    "link" : "rules/react-mobx-cursorrules-prompt-file/mobx-dependency-injection.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Utilize MobX DevTools for debugging MobX applications.",
    "tech-stack" : "React Mobx",
    "domain" : "Mobx Devtools",
    "link" : "rules/react-mobx-cursorrules-prompt-file/mobx-devtools.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforce best practices when using MobX with React Lite.",
    "tech-stack" : "React Mobx",
    "domain" : "Mobx React Lite Usage",
    "link" : "rules/react-mobx-cursorrules-prompt-file/mobx-react-lite-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Use reaction for side-effects based on observable changes.",
    "tech-stack" : "React Mobx",
    "domain" : "Mobx Reaction Usage",
    "link" : "rules/react-mobx-cursorrules-prompt-file/mobx-reaction-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for implementing MobX stores for application state management.",
    "tech-stack" : "React Mobx",
    "domain" : "Mobx Store Implementation",
    "link" : "rules/react-mobx-cursorrules-prompt-file/mobx-store-implementation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforce strict mode for MobX for better debugging.",
    "tech-stack" : "React Mobx",
    "domain" : "Mobx Strict Mode",
    "link" : "rules/react-mobx-cursorrules-prompt-file/mobx-strict-mode.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Use Observer HOC or the useObserver hook for reactive components.",
    "tech-stack" : "React Mobx",
    "domain" : "Observer Hoc Or Useobserver Hook",
    "link" : "rules/react-mobx-cursorrules-prompt-file/observer-hoc-or-useobserver-hook.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General React preferences to prefer functional components with hooks.",
    "tech-stack" : "React Mobx",
    "domain" : "React General Preferences",
    "link" : "rules/react-mobx-cursorrules-prompt-file/react-general-preferences.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Instructions on how to use Typescript with MobX.",
    "tech-stack" : "React Mobx",
    "domain" : "Typescript With Mobx",
    "link" : "rules/react-mobx-cursorrules-prompt-file/typescript-with-mobx.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general best practices for using HTMX with Go, focusing on server-side rendering and request handling.",
    "tech-stack" : "Htmx Go Basic",
    "domain" : "Htmx And Go Best Practices",
    "link" : "rules/htmx-go-basic-cursorrules-prompt-file/htmx-and-go---best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides additional instructions for implementing HTMX with Go, including semantic HTML, CSRF protection, and error handling.",
    "tech-stack" : "Htmx Go Basic",
    "domain" : "Htmx With Go Additional Instructions",
    "link" : "rules/htmx-go-basic-cursorrules-prompt-file/htmx-with-go---additional-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the recommended folder structure for a Go project using HTMX, including directories for commands, internal logic, templates, and static assets.",
    "tech-stack" : "Htmx Go Basic",
    "domain" : "Htmx With Go Folder Structure",
    "link" : "rules/htmx-go-basic-cursorrules-prompt-file/htmx-with-go---folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets specific code style guidelines for TypeScript files, focusing on variable declaration, function usage, and type system utilization.",
    "tech-stack" : "TS/TypeScript Llm Tech Stack",
    "domain" : "Code Style",
    "link" : "rules/typescript-llm-tech-stack-cursorrules-prompt-file/code-style.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Mandates the use of JSDoc comments and up-to-date README files to ensure proper documentation throughout the project.",
    "tech-stack" : "TS/TypeScript Llm Tech Stack",
    "domain" : "Documentation",
    "link" : "rules/typescript-llm-tech-stack-cursorrules-prompt-file/documentation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the file organization structure for TypeScript projects, emphasizing modularity and separation of concerns.",
    "tech-stack" : "TS/TypeScript Llm Tech Stack",
    "domain" : "File Organization",
    "link" : "rules/typescript-llm-tech-stack-cursorrules-prompt-file/file-organization.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general coding standards and best practices for all TypeScript files within the project, focusing on naming conventions, file organization, and code style.",
    "tech-stack" : "TS/TypeScript Llm Tech Stack",
    "domain" : "General Typescript Project Rules",
    "link" : "rules/typescript-llm-tech-stack-cursorrules-prompt-file/general-typescript-project-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidelines for effective utilization of specific libraries within the project, including axios, js-yaml, mime-types, node-gyp, uuid, and zod.",
    "tech-stack" : "TS/TypeScript Llm Tech Stack",
    "domain" : "Library Usage",
    "link" : "rules/typescript-llm-tech-stack-cursorrules-prompt-file/library-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces specific naming conventions across all TypeScript files to maintain consistency and readability.",
    "tech-stack" : "TS/TypeScript Llm Tech Stack",
    "domain" : "Naming Conventions",
    "link" : "rules/typescript-llm-tech-stack-cursorrules-prompt-file/naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Suggests utilizing createStore for complex state management within SolidJS components.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Complex State Management",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---complex-state-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Advises the implementation of Show and For components for conditional and list rendering in SolidJS.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Conditional And List Rendering",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---conditional-and-list-rendering.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends using createResource for data fetching within SolidJS components.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Data Fetching",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---data-fetching.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guides the implementation of createMemo for managing derived values in SolidJS components.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Derived Values Management",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---derived-values-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends implementing proper error boundaries within the SolidJS project.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Error Boundaries",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---error-boundaries.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the preference for functional components in SolidJS projects within the components directory.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Functional Components Preference",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---functional-components-preference.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the use of JSX for component templates throughout the SolidJS project.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Jsx Templates",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---jsx-templates.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends implementing lazy-loading for improved performance within SolidJS.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Lazy Loading",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---lazy-loading.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Requires adherence to Solid.js naming conventions and best practices throughout the project.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Naming Conventions",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Suggests utilizing Solid's built-in optimization features for enhanced performance.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Optimization Features",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---optimization-features.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidelines for managing reactive state using createSignal in SolidJS components.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Reactive State Management",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---reactive-state-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Suggests the implementation of server-side rendering (SSR) when needed in SolidJS projects.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Server Side Rendering",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---server-side-rendering.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the use of createEffect for handling side effects in SolidJS components.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Side Effects Handling",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---side-effects-handling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Encourages the use of Solid Router for routing when applicable in SolidJS projects.",
    "tech-stack" : "Solidjs Basic",
    "domain" : "Solidjs Solid Router",
    "link" : "rules/solidjs-basic-cursorrules-prompt-file/solidjs---solid-router.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for the entire Todo web application project. Encompasses specifications and guidelines applicable across all files.",
    "tech-stack" : "Next.js Supabase Todo App",
    "domain" : "Todo App General Rules",
    "link" : "rules/nextjs-supabase-todo-app-cursorrules-prompt-file/todo-app-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Utilize Apollo Client's caching capabilities to improve performance.",
    "tech-stack" : "React Graphql Apollo Client",
    "domain" : "Apollo Caching",
    "link" : "rules/react-graphql-apollo-client-cursorrules-prompt-file/apollo-caching.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Instructs to implement custom hooks for Apollo operations.",
    "tech-stack" : "React Graphql Apollo Client",
    "domain" : "Apollo Custom Hooks",
    "link" : "rules/react-graphql-apollo-client-cursorrules-prompt-file/apollo-custom-hooks.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Suggests the use of Apollo Client DevTools for debugging.",
    "tech-stack" : "React Graphql Apollo Client",
    "domain" : "Apollo Devtools",
    "link" : "rules/react-graphql-apollo-client-cursorrules-prompt-file/apollo-devtools.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Requires the use of Apollo Provider at the root of the application.",
    "tech-stack" : "React Graphql Apollo Client",
    "domain" : "Apollo Provider Setup",
    "link" : "rules/react-graphql-apollo-client-cursorrules-prompt-file/apollo-provider-setup.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies best practices for GraphQL and Apollo Client usage, including state management, data fetching, and error handling.",
    "tech-stack" : "React Graphql Apollo Client",
    "domain" : "Graphql Apollo Client Usage",
    "link" : "rules/react-graphql-apollo-client-cursorrules-prompt-file/graphql-apollo-client-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Requires the implementation of proper error boundaries for GraphQL errors.",
    "tech-stack" : "React Graphql Apollo Client",
    "domain" : "Graphql Error Boundaries",
    "link" : "rules/react-graphql-apollo-client-cursorrules-prompt-file/graphql-error-boundaries.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Requires following naming conventions for queries, mutations, and fragments.",
    "tech-stack" : "React Graphql Apollo Client",
    "domain" : "Graphql Naming Conventions",
    "link" : "rules/react-graphql-apollo-client-cursorrules-prompt-file/graphql-naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the use of TypeScript for type safety with GraphQL operations.",
    "tech-stack" : "React Graphql Apollo Client",
    "domain" : "Graphql Typescript Integration",
    "link" : "rules/react-graphql-apollo-client-cursorrules-prompt-file/graphql-typescript-integration.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the use of functional components with hooks in React components.",
    "tech-stack" : "React Graphql Apollo Client",
    "domain" : "React Functional Components Preference",
    "link" : "rules/react-graphql-apollo-client-cursorrules-prompt-file/react-functional-components-preference.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Prioritizes error handling and edge cases in all code. Defines how to manage errors, handle preconditions, and implement logging.",
    "tech-stack" : "Next.js React TS/TypeScript",
    "domain" : "Error Handling And Validation",
    "link" : "rules/nextjs-react-typescript-cursorrules-prompt-file/error-handling-and-validation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General coding conventions and preferences for Solidity, TypeScript, Node.js, and Next.js projects. This rule sets the foundation for code style and architecture.",
    "tech-stack" : "Next.js React TS/TypeScript",
    "domain" : "General Solidity Typescript Node Js Next Js Rule",
    "link" : "rules/nextjs-react-typescript-cursorrules-prompt-file/general-solidity-typescript-node-js-next-js-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific JavaScript/TypeScript coding style guidelines. Focuses on syntax, usage of TypeScript features, and file structure.",
    "tech-stack" : "Next.js React TS/TypeScript",
    "domain" : "Javascript Typescript Coding Style",
    "link" : "rules/nextjs-react-typescript-cursorrules-prompt-file/javascript-typescript-coding-style.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Key Next.js conventions for state changes, web vitals, and client-side code usage.",
    "tech-stack" : "Next.js React TS/TypeScript",
    "domain" : "Next Js Conventions",
    "link" : "rules/nextjs-react-typescript-cursorrules-prompt-file/next-js-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific guidelines for Next.js server actions, including error modeling, validation, and usage of next-safe-action.",
    "tech-stack" : "Next.js React TS/TypeScript",
    "domain" : "Next Js Server Actions",
    "link" : "rules/nextjs-react-typescript-cursorrules-prompt-file/next-js-server-actions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "React/Next.js component specific rules. This includes using functional components, JSX, styling, and other React/Next.js conventions.",
    "tech-stack" : "Next.js React TS/TypeScript",
    "domain" : "React Next Js Components",
    "link" : "rules/nextjs-react-typescript-cursorrules-prompt-file/react-next-js-components.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specific to CSS files, focusing on the use of TailwindCSS and avoiding custom CSS when possible.",
    "tech-stack" : "Vue 3 Nuxt 3 Development",
    "domain" : "Css Specific Rules",
    "link" : "rules/vue-3-nuxt-3-development-cursorrules-prompt-file/css-specific-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specific to HTML files, focusing on accessibility and Tailwind styling.",
    "tech-stack" : "Vue 3 Nuxt 3 Development",
    "domain" : "Html Specific Rules",
    "link" : "rules/vue-3-nuxt-3-development-cursorrules-prompt-file/html-specific-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies to Vue 3 and Nuxt 3 projects, enforcing best practices for frontend development including TypeScript, TailwindCSS, and Composition API.",
    "tech-stack" : "Vue 3 Nuxt 3 Development",
    "domain" : "Vue Nuxt General Rules",
    "link" : "rules/vue-3-nuxt-3-development-cursorrules-prompt-file/vue-nuxt-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for creating and maintaining Dockerfiles.",
    "tech-stack" : "Python Containerization",
    "domain" : "Containerization Rules",
    "link" : "rules/python-containerization-cursorrules-prompt-file/containerization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for writing and optimizing database algorithms.",
    "tech-stack" : "Python Containerization",
    "domain" : "Database Algorithm Rules",
    "link" : "rules/python-containerization-cursorrules-prompt-file/database-algorithm-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General Python development rules applicable to all Python files in the project.",
    "tech-stack" : "Python Containerization",
    "domain" : "Python General Rules",
    "link" : "rules/python-containerization-cursorrules-prompt-file/python-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces a consistent naming convention for directories across the project.",
    "tech-stack" : "Nextjs15 React19 Vercelai Tailwind",
    "domain" : "Directory Naming Conventions",
    "link" : "rules/nextjs15-react19-vercelai-tailwind-cursorrules-prompt-file/directory-naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general coding principles and best practices for TypeScript and React development across the project.",
    "tech-stack" : "Nextjs15 React19 Vercelai Tailwind",
    "domain" : "General Typescript And React Rules",
    "link" : "rules/nextjs15-react19-vercelai-tailwind-cursorrules-prompt-file/general-typescript-and-react-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Dictates how asynchronous requests should be handled within Next.js 15, specifically concerning runtime APIs.",
    "tech-stack" : "Nextjs15 React19 Vercelai Tailwind",
    "domain" : "Next Js 15 Async Request Api Rules",
    "link" : "rules/nextjs15-react19-vercelai-tailwind-cursorrules-prompt-file/next-js-15-async-request-api-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the best practices for building React components within the Next.js 15 App Router structure.",
    "tech-stack" : "Nextjs15 React19 Vercelai Tailwind",
    "domain" : "Next Js 15 Component Architecture Rules",
    "link" : "rules/nextjs15-react19-vercelai-tailwind-cursorrules-prompt-file/next-js-15-component-architecture-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the recommended state management strategies for Next.js 15 applications, including server and client contexts.",
    "tech-stack" : "Nextjs15 React19 Vercelai Tailwind",
    "domain" : "Next Js 15 State Management Rules",
    "link" : "rules/nextjs15-react19-vercelai-tailwind-cursorrules-prompt-file/next-js-15-state-management-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides additional instructions for TypeScript React development, including file extensions, strict checks, and error handling.",
    "tech-stack" : "TS/TypeScript React",
    "domain" : "Typescript React Additional Instructions",
    "link" : "rules/typescript-react-cursorrules-prompt-file/typescript-react---additional-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces TypeScript React best practices related to using React.FC, hooks, interfaces, and optimization techniques.",
    "tech-stack" : "TS/TypeScript React",
    "domain" : "Typescript React Best Practices",
    "link" : "rules/typescript-react-cursorrules-prompt-file/typescript-react---best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the preferred folder structure for TypeScript React projects to maintain a consistent organization.",
    "tech-stack" : "TS/TypeScript React",
    "domain" : "Typescript React Folder Structure",
    "link" : "rules/typescript-react-cursorrules-prompt-file/typescript-react---folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets general preferences for TypeScript React development, such as preferring functional components.",
    "tech-stack" : "TS/TypeScript React",
    "domain" : "Typescript React General Preferences",
    "link" : "rules/typescript-react-cursorrules-prompt-file/typescript-react---general-preferences.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the correct Babel configuration for NativeWind to ensure proper processing and avoid conflicts.",
    "tech-stack" : "React Native Expo Router TS/TypeScript Windows",
    "domain" : "Babel Configuration For Nativewind",
    "link" : "rules/react-native-expo-router-typescript-windows-cursorrules-prompt-file/babel-configuration-for-nativewind.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides general instructions for project management, including terminal commands, package management, and file operations.",
    "tech-stack" : "React Native Expo Router TS/TypeScript Windows",
    "domain" : "General Project Instructions",
    "link" : "rules/react-native-expo-router-typescript-windows-cursorrules-prompt-file/general-project-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides specific version compatibility notes for NativeWind and Tailwind CSS to prevent common installation errors.",
    "tech-stack" : "React Native Expo Router TS/TypeScript Windows",
    "domain" : "Nativewind And Tailwind Css Compatibility",
    "link" : "rules/react-native-expo-router-typescript-windows-cursorrules-prompt-file/nativewind-and-tailwind-css-compatibility.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces best practices for React Native Expo development within the src directory, promoting maintainable and efficient code.",
    "tech-stack" : "React Native Expo Router TS/TypeScript Windows",
    "domain" : "React Native Expo Best Practices",
    "link" : "rules/react-native-expo-router-typescript-windows-cursorrules-prompt-file/react-native-expo-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the recommended folder structure for React Native Expo projects to maintain organization and scalability.",
    "tech-stack" : "React Native Expo Router TS/TypeScript Windows",
    "domain" : "React Native Expo Folder Structure",
    "link" : "rules/react-native-expo-router-typescript-windows-cursorrules-prompt-file/react-native-expo-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Favors the use of async and await for asynchronous programming in Python.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Asynchronous Programming Preference",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/asynchronous-programming-preference.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces code formatting using Ruff, replacing Black, isort, and flake8 for consistent style.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Code Formatting With Ruff",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/code-formatting-with-ruff.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Requires detailed type annotations for all Python functions, methods, and class members.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Comprehensive Type Annotations",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/comprehensive-type-annotations.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Aims for high test coverage using pytest, testing both common and edge cases.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Comprehensive Unit Testing With Pytest",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/comprehensive-unit-testing-with-pytest.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Employs scripts or tools like dvc to manage data preprocessing and ensure reproducibility.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Data Pipeline Management With Dvc",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/data-pipeline-management-with-dvc.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Use Pydantic models for rigorous request and response data validation in FastAPI applications.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Data Validation With Pydantic",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/data-validation-with-pydantic.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Requires detailed Google-style docstrings for all functions, methods, and classes.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Detailed Docstrings",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/detailed-docstrings.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends using Hydra or YAML for experiment configuration to ensure clarity and reproducibility.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Experiment Configuration With Hydra Yaml",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/experiment-configuration-with-hydra-yaml.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies FastAPI as the web framework for API development.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Fastapi Web Framework",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/fastapi-web-framework.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Requires Google-style docstrings for all Python functions, methods, and classes.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Google Style Docstrings",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/google-style-docstrings.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Dedicates a module or files for managing Prompt templates with version control for LLM applications.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Llm Prompt Engineering",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/llm-prompt-engineering.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Employs the logging module judiciously to log important events, warnings, and errors.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Logging Module Usage",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/logging-module-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies Poetry or Rye for dependency management in Python projects.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Poetry Rye Dependency Management",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/poetry-rye-dependency-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Prioritizes the use of new features available in Python 3.10 and later versions.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Prioritize Python 3 10 Features",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/prioritize-python-3-10-features.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the AI's role as a Python master, tutor, ML engineer, and data scientist, emphasizing code quality and clear explanations.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Python General Role Definition",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/python-general-role-definition.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies pytest as the testing framework for Python projects.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Testing Framework Pytest",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/testing-framework-pytest.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Mandates strict type hinting using the typing module for all Python functions, methods, and class members.",
    "tech-stack" : "Python Llm Ml Workflow",
    "domain" : "Type Hinting Rule",
    "link" : "rules/python-llm-ml-workflow-cursorrules-prompt-file/type-hinting-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Structure of ApiResponse class.",
    "tech-stack" : "Java Springboot Jpa",
    "domain" : "Apiresponse Class",
    "link" : "rules/java-springboot-jpa-cursorrules-prompt-file/apiresponse-class.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets standards for Data Transfer Objects (DTOs), typically records, including parameter validation in compact canonical constructors.",
    "tech-stack" : "Java Springboot Jpa",
    "domain" : "Dto Conventions",
    "link" : "rules/java-springboot-jpa-cursorrules-prompt-file/dto-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets the standards for entity class design including annotations, ID generation strategies, and relationship configurations for database interaction.",
    "tech-stack" : "Java Springboot Jpa",
    "domain" : "Entity Class Conventions",
    "link" : "rules/java-springboot-jpa-cursorrules-prompt-file/entity-class-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general coding standards and best practices for Java development, focusing on SOLID, DRY, KISS, and YAGNI principles, along with OWASP security guidelines.",
    "tech-stack" : "Java Springboot Jpa",
    "domain" : "General Java Development Practices",
    "link" : "rules/java-springboot-jpa-cursorrules-prompt-file/general-java-development-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Structure of GlobalExceptionHandler class.",
    "tech-stack" : "Java Springboot Jpa",
    "domain" : "Globalexceptionhandler Class",
    "link" : "rules/java-springboot-jpa-cursorrules-prompt-file/globalexceptionhandler-class.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Governs the structure and functionality of repository classes, emphasizing the use of JpaRepository, JPQL queries, and EntityGraphs to prevent N+1 problems.",
    "tech-stack" : "Java Springboot Jpa",
    "domain" : "Repository Class Conventions",
    "link" : "rules/java-springboot-jpa-cursorrules-prompt-file/repository-class-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies standards for RestController classes, including API route mappings, HTTP method annotations, dependency injection, and error handling with ApiResponse and GlobalExceptionHandler.",
    "tech-stack" : "Java Springboot Jpa",
    "domain" : "Restcontroller Conventions",
    "link" : "rules/java-springboot-jpa-cursorrules-prompt-file/restcontroller-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the structure and implementation of service classes, enforcing the use of interfaces, ServiceImpl classes, DTOs for data transfer, and transactional management.",
    "tech-stack" : "Java Springboot Jpa",
    "domain" : "Service Class Conventions",
    "link" : "rules/java-springboot-jpa-cursorrules-prompt-file/service-class-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Governs application logic design in Spring Boot projects, defining the roles and responsibilities of RestControllers, Services, Repositories, and DTOs.",
    "tech-stack" : "Java Springboot Jpa",
    "domain" : "Spring Boot Configuration",
    "link" : "rules/java-springboot-jpa-cursorrules-prompt-file/spring-boot-configuration.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for handling errors and validating input.",
    "tech-stack" : "TS/TypeScript Vuejs",
    "domain" : "Error Handling And Validation",
    "link" : "rules/typescript-vuejs-cursorrules-prompt-file/error-handling-and-validation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general code style and structure guidelines to JavaScript, TypeScript, Python files.",
    "tech-stack" : "TS/TypeScript Vuejs",
    "domain" : "General Code Style And Structure",
    "link" : "rules/typescript-vuejs-cursorrules-prompt-file/general-code-style-and-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces specific naming conventions across the project.",
    "tech-stack" : "TS/TypeScript Vuejs",
    "domain" : "Naming Conventions",
    "link" : "rules/typescript-vuejs-cursorrules-prompt-file/naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for optimizing application performance.",
    "tech-stack" : "TS/TypeScript Vuejs",
    "domain" : "Performance Optimization",
    "link" : "rules/typescript-vuejs-cursorrules-prompt-file/performance-optimization.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines syntax and formatting rules for consistent code appearance.",
    "tech-stack" : "TS/TypeScript Vuejs",
    "domain" : "Syntax And Formatting",
    "link" : "rules/typescript-vuejs-cursorrules-prompt-file/syntax-and-formatting.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules and guidelines for using TypeScript.",
    "tech-stack" : "TS/TypeScript Vuejs",
    "domain" : "Typescript Usage",
    "link" : "rules/typescript-vuejs-cursorrules-prompt-file/typescript-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for UI and styling in Vue.js components.",
    "tech-stack" : "TS/TypeScript Vuejs",
    "domain" : "Ui And Styling",
    "link" : "rules/typescript-vuejs-cursorrules-prompt-file/ui-and-styling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific conventions for Vue.js components. Follow Vue.js docs where appropriate.",
    "tech-stack" : "TS/TypeScript Vuejs",
    "domain" : "Vue Js Conventions",
    "link" : "rules/typescript-vuejs-cursorrules-prompt-file/vue-js-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for EEG signal processing related files, focusing on data integrity and algorithm efficiency.",
    "tech-stack" : "Pyqt6 Eeg Processing",
    "domain" : "Eeg Signal Processing Rules",
    "link" : "rules/pyqt6-eeg-processing-cursorrules-prompt-file/eeg-signal-processing-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules for PyQt6 based UI development focusing on UI/UX excellence and performance.",
    "tech-stack" : "Pyqt6 Eeg Processing",
    "domain" : "Pyqt6 Ui Development Rules",
    "link" : "rules/pyqt6-eeg-processing-cursorrules-prompt-file/pyqt6-ui-development-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General Python coding style and best practices for all Python files in the project.",
    "tech-stack" : "Pyqt6 Eeg Processing",
    "domain" : "Python General Rules",
    "link" : "rules/pyqt6-eeg-processing-cursorrules-prompt-file/python-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Root level project guidelines and initial steps to start and implement EEG processor",
    "tech-stack" : "Pyqt6 Eeg Processing",
    "domain" : "Root Level Project Instructions",
    "link" : "rules/pyqt6-eeg-processing-cursorrules-prompt-file/root-level-project-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for workflow optimization and integration with external tools and databases.",
    "tech-stack" : "Pyqt6 Eeg Processing",
    "domain" : "Workflow And Integration Rules",
    "link" : "rules/pyqt6-eeg-processing-cursorrules-prompt-file/workflow-and-integration-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for maintaining a consistent file structure within individual element directories.",
    "tech-stack" : "Graphical Apps Development",
    "domain" : "Element File Structure Rules",
    "link" : "rules/graphical-apps-development-cursorrules-prompt-file/element-file-structure-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This applies to most files in the project. Enforces developer-friendly practices and documentation.",
    "tech-stack" : "Graphical Apps Development",
    "domain" : "General Project Rules",
    "link" : "rules/graphical-apps-development-cursorrules-prompt-file/general-project-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General Python project rules for all Python files in the project. Enforces specific Python versions and class usage.",
    "tech-stack" : "Graphical Apps Development",
    "domain" : "General Python Project Rules",
    "link" : "rules/graphical-apps-development-cursorrules-prompt-file/general-python-project-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules to apply to files relating to Langchain. Langchain is responsible for LLM related workflows.",
    "tech-stack" : "Graphical Apps Development",
    "domain" : "Langchain Integration Rules",
    "link" : "rules/graphical-apps-development-cursorrules-prompt-file/langchain-integration-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for Panel views, specifying that Panel should be used for the visualization layer.",
    "tech-stack" : "Graphical Apps Development",
    "domain" : "Panel View Rules",
    "link" : "rules/graphical-apps-development-cursorrules-prompt-file/panel-view-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules related to Param, to be applied when defining models. Models use Param to define parameters with validation and reactivity.",
    "tech-stack" : "Graphical Apps Development",
    "domain" : "Param Parameterized Class Rules",
    "link" : "rules/graphical-apps-development-cursorrules-prompt-file/param-parameterized-class-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general coding rules across all file types to maintain code quality, consistency, and prevent common errors.",
    "tech-stack" : "Code Guidelines",
    "domain" : "General Coding Rules",
    "link" : "rules/code-guidelines-cursorrules-prompt-file/general-coding-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Governs the mechanics related to armies, battles, and territorial control. This rule focuses on combat, resource management, and strategic expansion within the game.",
    "tech-stack" : "Ascii Simulation Game",
    "domain" : "Army And Battle Mechanics Rule",
    "link" : "rules/ascii-simulation-game-cursorrules-prompt-file/army-and-battle-mechanics-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the core mechanics of the game, including map generation, resource management, and nation interactions. This rule focuses on the overall structure of the game world and gameplay loop.",
    "tech-stack" : "Ascii Simulation Game",
    "domain" : "Core Game Mechanics Rule",
    "link" : "rules/ascii-simulation-game-cursorrules-prompt-file/core-game-mechanics-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the requirements for tracking game data and generating charts. This rule ensures that the game provides comprehensive information to the player through data visualization.",
    "tech-stack" : "Ascii Simulation Game",
    "domain" : "Data Tracking And Charts Rule",
    "link" : "rules/ascii-simulation-game-cursorrules-prompt-file/data-tracking-and-charts-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets the foundation for the project, dictating the game's design principles and coding standards. It establishes the role of the AI as an expert in game design and programming.",
    "tech-stack" : "Ascii Simulation Game",
    "domain" : "General Game Design And Programming Rules",
    "link" : "rules/ascii-simulation-game-cursorrules-prompt-file/general-game-design-and-programming-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the visual aspects of the game and how the player observes the world. This includes map color-coding, screen effects, and the overall simulation style.",
    "tech-stack" : "Ascii Simulation Game",
    "domain" : "Visual And Observational Rules",
    "link" : "rules/ascii-simulation-game-cursorrules-prompt-file/visual-and-observational-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies best practices and conventions for Expo-based mobile app development.",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "Expo Mobile App Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/expo-mobile-app-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General project rules that applies to all file types. Should be most general",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "General Project Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/general-project-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general TypeScript best practices and style guidelines to all TypeScript files in the project.",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "General Typescript Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/general-typescript-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies Next.js App Router specific guidelines to components and pages within the 'app' directory.",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "Next Js App Router Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/next-js-app-router-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces Node.js specific conventions and practices in the backend server directory.",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "Node Js Backend Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/node-js-backend-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific styles and conventions for Radix UI components",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "Radix Ui Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/radix-ui-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines code style and best practices for React components across the project.",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "React Component Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/react-component-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies specific styles and conventions related to Shadcn UI components.",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "Shadcn Ui Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/shadcn-ui-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Apply Tailwind CSS styling conventions in all relevant files.",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "Tailwind Css Styling Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/tailwind-css-styling-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces conventions and practices for tRPC API endpoints and procedures.",
    "tech-stack" : "TS/TypeScript Code Convention",
    "domain" : "Trpc Api Rule",
    "link" : "rules/typescript-code-convention-cursorrules-prompt-file/trpc-api-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces rules for creating and managing build notes files within the /ProjectDocs/Build_Notes/ directory, including naming conventions, content structure, and update frequency.",
    "tech-stack" : "Next.js Supabase Shadcn Pwa",
    "domain" : "Build Notes File Rules",
    "link" : "rules/nextjs-supabase-shadcn-pwa-cursorrules-prompt-file/build-notes-file-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the process for creating and maintaining build notes, emphasizing clarity, traceability, and incremental updates for task progress tracking.",
    "tech-stack" : "Next.js Supabase Shadcn Pwa",
    "domain" : "Build Notes Guidelines",
    "link" : "rules/nextjs-supabase-shadcn-pwa-cursorrules-prompt-file/build-notes-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies rules for managing context files, including the master project context and supplementary files, emphasizing stability and change management.",
    "tech-stack" : "Next.js Supabase Shadcn Pwa",
    "domain" : "Context Files Rules",
    "link" : "rules/nextjs-supabase-shadcn-pwa-cursorrules-prompt-file/context-files-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces general code quality and style guidelines across the entire project, including TypeScript best practices, functional programming principles, and code review processes.",
    "tech-stack" : "Next.js Supabase Shadcn Pwa",
    "domain" : "General Code Quality And Style",
    "link" : "rules/nextjs-supabase-shadcn-pwa-cursorrules-prompt-file/general-code-quality-and-style.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Outlines the monorepo structure and tooling conventions, emphasizing the use of Taskfile.yml, and proper handling of environment variables.",
    "tech-stack" : "Next.js Supabase Shadcn Pwa",
    "domain" : "Monorepo And Tooling",
    "link" : "rules/nextjs-supabase-shadcn-pwa-cursorrules-prompt-file/monorepo-and-tooling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets conventions for Next.js 15+ projects, including leveraging the App Router, React Server Components (RSC), SSR capabilities, and Zustand for state management.",
    "tech-stack" : "Next.js Supabase Shadcn Pwa",
    "domain" : "Next Js 15 Conventions",
    "link" : "rules/nextjs-supabase-shadcn-pwa-cursorrules-prompt-file/next-js-15-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the importance of reviewing and maintaining project context files, ensuring stability, selective updates, and accessibility for future developers.",
    "tech-stack" : "Next.js Supabase Shadcn Pwa",
    "domain" : "Project Context Review",
    "link" : "rules/nextjs-supabase-shadcn-pwa-cursorrules-prompt-file/project-context-review.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the use of classes for complex state management (state machines) in Svelte components. Applies specifically to `.svelte.ts` files.",
    "tech-stack" : "Sveltekit TS/TypeScript Guide",
    "domain" : "Class Based State Management",
    "link" : "rules/sveltekit-typescript-guide-cursorrules-prompt-file/class-based-state-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for developing Svelte components, including state management and component structure. This rule applies specifically to files under the `src/lib/components` directory.",
    "tech-stack" : "Sveltekit TS/TypeScript Guide",
    "domain" : "Component Development Rules",
    "link" : "rules/sveltekit-typescript-guide-cursorrules-prompt-file/component-development-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for using Drizzle ORM within the `src/lib/db` directory. Ensures consistent data modeling and database interactions.",
    "tech-stack" : "Sveltekit TS/TypeScript Guide",
    "domain" : "Drizzle Orm Rules",
    "link" : "rules/sveltekit-typescript-guide-cursorrules-prompt-file/drizzle-orm-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for Svelte 5, SvelteKit, TypeScript, Supabase, and Drizzle projects. This rule enforces code style, naming conventions, TypeScript usage, Svelte runes, UI/styling, Shadcn color conventions, and SvelteKit project structure.",
    "tech-stack" : "Sveltekit TS/TypeScript Guide",
    "domain" : "General Sveltekit Typescript Rules",
    "link" : "rules/sveltekit-typescript-guide-cursorrules-prompt-file/general-sveltekit-typescript-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules for interacting with Supabase in the `src/lib/supabase` directory. This ensures consistent and correct Supabase integration.",
    "tech-stack" : "Sveltekit TS/TypeScript Guide",
    "domain" : "Supabase Integration Rules",
    "link" : "rules/sveltekit-typescript-guide-cursorrules-prompt-file/supabase-integration-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for code style and structure in TypeScript, Node.js, and Next.js projects.",
    "tech-stack" : "TS/TypeScript Next.js",
    "domain" : "Code Style And Structure Rules",
    "link" : "rules/typescript-nextjs-cursorrules-prompt-file/code-style-and-structure-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for TypeScript, Node.js, and Next.js projects, including package manager preference and preferred technologies.",
    "tech-stack" : "TS/TypeScript Next.js",
    "domain" : "General Typescript Node Js Next Js Rules",
    "link" : "rules/typescript-nextjs-cursorrules-prompt-file/general-typescript-node-js-next-js-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Key Conventions for Next.js projects like usage of 'nuqs', web vitals optimization, and limitation of client-side components.",
    "tech-stack" : "TS/TypeScript Next.js",
    "domain" : "Key Conventions Rule",
    "link" : "rules/typescript-nextjs-cursorrules-prompt-file/key-conventions-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for naming conventions in TypeScript, Node.js, and Next.js projects.",
    "tech-stack" : "TS/TypeScript Next.js",
    "domain" : "Naming Conventions Rule",
    "link" : "rules/typescript-nextjs-cursorrules-prompt-file/naming-conventions-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Follow Next.js documentation regarding Data Fetching, Rendering and Routing when working in the /app directory",
    "tech-stack" : "TS/TypeScript Next.js",
    "domain" : "Next Js Data Fetching Rendering Routing",
    "link" : "rules/typescript-nextjs-cursorrules-prompt-file/next-js-data-fetching-rendering-routing.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for performance optimization, including minimizing client-side code and optimizing images.",
    "tech-stack" : "TS/TypeScript Next.js",
    "domain" : "Performance Optimization Rule",
    "link" : "rules/typescript-nextjs-cursorrules-prompt-file/performance-optimization-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for syntax and formatting in TypeScript, Node.js, and Next.js projects.",
    "tech-stack" : "TS/TypeScript Next.js",
    "domain" : "Syntax And Formatting Rule",
    "link" : "rules/typescript-nextjs-cursorrules-prompt-file/syntax-and-formatting-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specific to TypeScript usage including interfaces, types, and functional components.",
    "tech-stack" : "TS/TypeScript Next.js",
    "domain" : "Typescript Usage Rule",
    "link" : "rules/typescript-nextjs-cursorrules-prompt-file/typescript-usage-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for UI and styling using Daisy UI and Tailwind in React components.",
    "tech-stack" : "TS/TypeScript Next.js",
    "domain" : "Ui And Styling Rule",
    "link" : "rules/typescript-nextjs-cursorrules-prompt-file/ui-and-styling-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces specific code style and structure guidelines for TypeScript and Google Apps Script development.",
    "tech-stack" : "TS/TypeScript Clasp",
    "domain" : "Code Style And Structure Rule",
    "link" : "rules/typescript-clasp-cursorrules-prompt-file/code-style-and-structure-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general TypeScript and Google Apps Script best practices to all TypeScript files within the project.",
    "tech-stack" : "TS/TypeScript Clasp",
    "domain" : "General Typescript Google Apps Script Rule",
    "link" : "rules/typescript-clasp-cursorrules-prompt-file/general-typescript-google-apps-script-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidelines for effectively utilizing Google Apps Script services and features.",
    "tech-stack" : "TS/TypeScript Clasp",
    "domain" : "Google Apps Script Specifics Rule",
    "link" : "rules/typescript-clasp-cursorrules-prompt-file/google-apps-script-specifics-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Emphasizes best practices for error handling, security, and deployment in Google Apps Script projects.",
    "tech-stack" : "TS/TypeScript Clasp",
    "domain" : "Key Conventions Rule",
    "link" : "rules/typescript-clasp-cursorrules-prompt-file/key-conventions-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies naming conventions for classes, functions, and variables in TypeScript/Google Apps Script projects.",
    "tech-stack" : "TS/TypeScript Clasp",
    "domain" : "Naming Conventions Rule",
    "link" : "rules/typescript-clasp-cursorrules-prompt-file/naming-conventions-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Offers strategies for optimizing Google Apps Script performance and resource usage.",
    "tech-stack" : "TS/TypeScript Clasp",
    "domain" : "Performance Optimization Rule",
    "link" : "rules/typescript-clasp-cursorrules-prompt-file/performance-optimization-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Dictates syntax and formatting best practices for writing TypeScript code in the Google Apps Script environment.",
    "tech-stack" : "TS/TypeScript Clasp",
    "domain" : "Syntax And Formatting Rule",
    "link" : "rules/typescript-clasp-cursorrules-prompt-file/syntax-and-formatting-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guides the correct usage of TypeScript features like interfaces, types, and enums within Google Apps Script.",
    "tech-stack" : "TS/TypeScript Clasp",
    "domain" : "Typescript Specific Usage Rule",
    "link" : "rules/typescript-clasp-cursorrules-prompt-file/typescript-specific-usage-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines how the assistant should respond, including its role as a senior pair programmer and the required format for responses, applying to all files.",
    "tech-stack" : "Next.js TS/TypeScript",
    "domain" : "Assistant Response Rules",
    "link" : "rules/nextjs-typescript-cursorrules-prompt-file/assistant-response-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the backend technology stack including Next.js API Routes and TypeScript, applying to all backend files.",
    "tech-stack" : "Next.js TS/TypeScript",
    "domain" : "Backend Stack Rules",
    "link" : "rules/nextjs-typescript-cursorrules-prompt-file/backend-stack-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the coding process, including step-by-step reasoning, prioritization, finishing files before moving on, and using TODO comments, applying to all files.",
    "tech-stack" : "Next.js TS/TypeScript",
    "domain" : "Coding Process Rules",
    "link" : "rules/nextjs-typescript-cursorrules-prompt-file/coding-process-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the coding style guidelines, including comments, modularity, DRY principle, performance, and security, applying to all files.",
    "tech-stack" : "Next.js TS/TypeScript",
    "domain" : "Coding Style Rules",
    "link" : "rules/nextjs-typescript-cursorrules-prompt-file/coding-style-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Prioritizes returning completely edited files and defines verbosity levels for code detail, applying to all files.",
    "tech-stack" : "Next.js TS/TypeScript",
    "domain" : "Editing Code Rules",
    "link" : "rules/nextjs-typescript-cursorrules-prompt-file/editing-code-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the frontend technology stack including React, TypeScript, Shadcn/UI, Tailwind CSS, and Lucide React, applying to all frontend files.",
    "tech-stack" : "Next.js TS/TypeScript",
    "domain" : "Frontend Stack Rules",
    "link" : "rules/nextjs-typescript-cursorrules-prompt-file/frontend-stack-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines general assistant behavior for all files, including how to handle errors, ask questions, and understand project stack.",
    "tech-stack" : "Next.js TS/TypeScript",
    "domain" : "General Assistant Rules",
    "link" : "rules/nextjs-typescript-cursorrules-prompt-file/general-assistant-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the format for ending responses, including a summary of requirements, code written, source tree, and next task, applying to all files.",
    "tech-stack" : "Next.js TS/TypeScript",
    "domain" : "History And Next Task Rules",
    "link" : "rules/nextjs-typescript-cursorrules-prompt-file/history-and-next-task-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies rules for LLM integration, including the use of a Python wrapper and an API endpoint, applying to all LLM-related files.",
    "tech-stack" : "Next.js TS/TypeScript",
    "domain" : "Llm Integration Rules",
    "link" : "rules/nextjs-typescript-cursorrules-prompt-file/llm-integration-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for Angular components, focusing on code quality, performance, and maintainability.",
    "tech-stack" : "Angular TS/TypeScript",
    "domain" : "Angular General",
    "link" : "rules/angular-typescript-cursorrules-prompt-file/angular-general.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specific to Angular templates that ensures code quality standards.",
    "tech-stack" : "Angular TS/TypeScript",
    "domain" : "Angular Template Hints",
    "link" : "rules/angular-typescript-cursorrules-prompt-file/angular-template-hints.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules about reasoning, accuracy, and knowledge gaps",
    "tech-stack" : "Angular TS/TypeScript",
    "domain" : "General Reasoning",
    "link" : "rules/angular-typescript-cursorrules-prompt-file/general-reasoning.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Instructions for refactoring code, focusing on readability, performance, and maintainability.",
    "tech-stack" : "Angular TS/TypeScript",
    "domain" : "Refactoring Existing Code",
    "link" : "rules/angular-typescript-cursorrules-prompt-file/refactoring-existing-code.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces code style and best practices for TypeScript files.",
    "tech-stack" : "Angular TS/TypeScript",
    "domain" : "Typescript Coding Style",
    "link" : "rules/angular-typescript-cursorrules-prompt-file/typescript-coding-style.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends a flexible project structure for Android applications, adapting to existing project organization.",
    "tech-stack" : "Android Jetpack Compose",
    "domain" : "Android Project Structure",
    "link" : "rules/android-jetpack-compose-cursorrules-prompt-file/android---project-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general best practices for Android Jetpack Compose development within the main application code.",
    "tech-stack" : "Android Jetpack Compose",
    "domain" : "Android Jetpack Compose General Best Practices",
    "link" : "rules/android-jetpack-compose-cursorrules-prompt-file/android-jetpack-compose---general-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Outlines performance optimization guidelines for Android Jetpack Compose applications.",
    "tech-stack" : "Android Jetpack Compose",
    "domain" : "Android Jetpack Compose Performance Guidelines",
    "link" : "rules/android-jetpack-compose-cursorrules-prompt-file/android-jetpack-compose---performance-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines testing guidelines for Android Jetpack Compose components, ViewModels, and UseCases.",
    "tech-stack" : "Android Jetpack Compose",
    "domain" : "Android Jetpack Compose Testing Guidelines",
    "link" : "rules/android-jetpack-compose-cursorrules-prompt-file/android-jetpack-compose---testing-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces specific UI-related guidelines for Jetpack Compose within the presentation layer.",
    "tech-stack" : "Android Jetpack Compose",
    "domain" : "Android Jetpack Compose Ui Guidelines",
    "link" : "rules/android-jetpack-compose-cursorrules-prompt-file/android-jetpack-compose---ui-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general rules for Convex development, emphasizing schema design, validator usage, and correct handling of system fields.",
    "tech-stack" : "Convex",
    "domain" : "Convex Development General",
    "link" : "rules/convex-cursorrules-prompt-file/convex-development---general.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidance on using built-in system fields and data types when defining Convex schemas to ensure proper data handling.",
    "tech-stack" : "Convex",
    "domain" : "Convex Schema Design Built In Types",
    "link" : "rules/convex-cursorrules-prompt-file/convex-schema-design---built-in-types.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Instructs developers to follow the patterns demonstrated in the example schema provided, paying attention to index creation and field validation using `v`.",
    "tech-stack" : "Convex",
    "domain" : "Convex Schema Design Example Schema",
    "link" : "rules/convex-cursorrules-prompt-file/convex-schema-design---example-schema.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the understanding that Convex automatically handles system fields (_id, _creationTime) and that manual index creation for these fields is unnecessary.",
    "tech-stack" : "Convex",
    "domain" : "Convex Schema Design System Fields",
    "link" : "rules/convex-cursorrules-prompt-file/convex-schema-design---system-fields.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule provides additional instructions for Next.js development, covering various aspects such as TypeScript, SEO, image optimization, styling, and error handling.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js Additional Instructions",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-additional-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule enforces Next.js App Router best practices in the 'app' directory.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js App Router Best Practices",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-app-router-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule advises using environment variables for configuration in a Next.js project.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js Env Variables",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-env-variables.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule mandates proper error boundaries for effective error handling in Next.js applications.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js Error Handling",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-error-handling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule defines the recommended folder structure for Next.js projects.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js Folder Structure",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule promotes the optimization of images using the Next.js Image component for better performance.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js Image Optimization",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-image-optimization.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule helps in following Next.js file naming conventions for special files within the 'app' directory.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js Naming Conventions",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule ensures that SEO best practices are followed through proper metadata implementation in Next.js.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js Seo Guidelines",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-seo-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule recommends using CSS Modules or Tailwind CSS for styling components in a Next.js project.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js Styling Conventions",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-styling-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule encourages the usage of Typescript for type safety across a Next.js project.",
    "tech-stack" : "Next.js App Router",
    "domain" : "Next Js Typescript Usage",
    "link" : "rules/nextjs-app-router-cursorrules-prompt-file/next-js-typescript-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines error handling and validation strategies within Ruby code in DragonRuby projects.",
    "tech-stack" : "Dragonruby Best Practices",
    "domain" : "Dragonruby Error Handling",
    "link" : "rules/dragonruby-best-practices-cursorrules-prompt-file/dragonruby-error-handling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general Ruby coding style, structure, and best practices for DragonRuby projects.",
    "tech-stack" : "Dragonruby Best Practices",
    "domain" : "Dragonruby General Ruby Rules",
    "link" : "rules/dragonruby-best-practices-cursorrules-prompt-file/dragonruby-general-ruby-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces specific naming conventions for files, methods, variables, classes, and modules in DragonRuby projects.",
    "tech-stack" : "Dragonruby Best Practices",
    "domain" : "Dragonruby Naming Conventions",
    "link" : "rules/dragonruby-best-practices-cursorrules-prompt-file/dragonruby-naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Dictates syntax and formatting guidelines for Ruby code within DragonRuby projects, adhering to the Ruby Style Guide.",
    "tech-stack" : "Dragonruby Best Practices",
    "domain" : "Dragonruby Syntax And Formatting",
    "link" : "rules/dragonruby-best-practices-cursorrules-prompt-file/dragonruby-syntax-and-formatting.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guides the integration of elements from the Devias Kit Pro template, ensuring consistency in coding style and structure.",
    "tech-stack" : "Next.js Vercel Supabase",
    "domain" : "Devias Template Integration",
    "link" : "rules/nextjs-vercel-supabase-cursorrules-prompt-file/devias-template-integration.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Outlines the objectives and direction of the BA Copilot project, emphasizing the vision for aiding business analysts and the planned features.",
    "tech-stack" : "Next.js Vercel Supabase",
    "domain" : "General Ba Copilot Rules",
    "link" : "rules/nextjs-vercel-supabase-cursorrules-prompt-file/general-ba-copilot-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines general project setup and technology stack for the BA Copilot project.",
    "tech-stack" : "Next.js Vercel Supabase",
    "domain" : "General Project Setup",
    "link" : "rules/nextjs-vercel-supabase-cursorrules-prompt-file/general-project-setup.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for database querying and data model creation using Supabase SDK and schema builder, focusing on the API routes directory.",
    "tech-stack" : "TS/TypeScript Next.js Supabase",
    "domain" : "Database Querying Rules",
    "link" : "rules/typescript-nextjs-supabase-cursorrules-prompt-file/database-querying-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General project rules for TypeScript, Node.js, and Next.js projects, covering code style, structure, naming conventions, and TypeScript usage.",
    "tech-stack" : "TS/TypeScript Next.js Supabase",
    "domain" : "General Typescript Node Js Next Js Project Rules",
    "link" : "rules/typescript-nextjs-supabase-cursorrules-prompt-file/general-typescript-node-js-next-js-project-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for key project conventions, including the use of 'nuqs' for URL search parameter state management and optimization of Web Vitals.",
    "tech-stack" : "TS/TypeScript Next.js Supabase",
    "domain" : "Key Conventions Rules",
    "link" : "rules/typescript-nextjs-supabase-cursorrules-prompt-file/key-conventions-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specific to the Next.js App Router, covering data fetching, API routes, error handling, loading states, and metadata.",
    "tech-stack" : "TS/TypeScript Next.js Supabase",
    "domain" : "Next Js App Router Rules",
    "link" : "rules/typescript-nextjs-supabase-cursorrules-prompt-file/next-js-app-router-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for optimizing performance in Next.js applications, focusing on minimizing client-side code and optimizing images.",
    "tech-stack" : "TS/TypeScript Next.js Supabase",
    "domain" : "Performance Optimization Rules",
    "link" : "rules/typescript-nextjs-supabase-cursorrules-prompt-file/performance-optimization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for UI styling, specifically targeting the components directory and using Shadcn UI, Radix, and Tailwind CSS.",
    "tech-stack" : "TS/TypeScript Next.js Supabase",
    "domain" : "Ui Styling Rules",
    "link" : "rules/typescript-nextjs-supabase-cursorrules-prompt-file/ui-styling-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for integrating Vercel AI SDK into Next.js applications for building AI-powered features.",
    "tech-stack" : "TS/TypeScript Next.js Supabase",
    "domain" : "Vercel Ai Sdk Integration Rules",
    "link" : "rules/typescript-nextjs-supabase-cursorrules-prompt-file/vercel-ai-sdk-integration-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for Go API development using the net/http package, focusing on code quality, security, and best practices.",
    "tech-stack" : "Go Servemux Rest Api",
    "domain" : "Go Api Development General Rules",
    "link" : "rules/go-servemux-rest-api-cursorrules-prompt-file/go-api-development-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule ensures proper error handling, status codes, and JSON response formatting in Go API development.",
    "tech-stack" : "Go Servemux Rest Api",
    "domain" : "Go Api Error Handling And Response Formatting",
    "link" : "rules/go-servemux-rest-api-cursorrules-prompt-file/go-api-error-handling-and-response-formatting.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule emphasizes security, scalability, and maintainability best practices in Go API development.",
    "tech-stack" : "Go Servemux Rest Api",
    "domain" : "Go Api Security And Best Practices",
    "link" : "rules/go-servemux-rest-api-cursorrules-prompt-file/go-api-security-and-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule enforces the use of Go's standard library for API development, focusing on idiomatic and efficient code.",
    "tech-stack" : "Go Servemux Rest Api",
    "domain" : "Go Api Standard Library Usage",
    "link" : "rules/go-servemux-rest-api-cursorrules-prompt-file/go-api-standard-library-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule focuses on the initial planning stage for Go API development, emphasizing detailed step-by-step thinking and pseudocode.",
    "tech-stack" : "Go Servemux Rest Api",
    "domain" : "Go Api Step By Step Planning",
    "link" : "rules/go-servemux-rest-api-cursorrules-prompt-file/go-api-step-by-step-planning.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific to Hardhat projects, guiding on using Hardhat's features and implementing a CI/CD pipeline.",
    "tech-stack" : "Solidity Hardhat",
    "domain" : "Hardhat Development Workflow",
    "link" : "rules/solidity-hardhat-cursorrules-prompt-file/hardhat-development-workflow.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces best practices for Solidity smart contract development, covering aspects like function visibility, naming conventions, and upgradeability patterns.",
    "tech-stack" : "Solidity Hardhat",
    "domain" : "Solidity Best Practices",
    "link" : "rules/solidity-hardhat-cursorrules-prompt-file/solidity-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Focuses on documentation practices for Solidity smart contracts, including code documentation, API documentation, and project documentation.",
    "tech-stack" : "Solidity Hardhat",
    "domain" : "Solidity Documentation",
    "link" : "rules/solidity-hardhat-cursorrules-prompt-file/solidity-documentation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general rules for Solidity smart contract development, focusing on conciseness, accuracy, and embracing new technologies while skipping AI self-references.",
    "tech-stack" : "Solidity Hardhat",
    "domain" : "Solidity General Rules",
    "link" : "rules/solidity-hardhat-cursorrules-prompt-file/solidity-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies to smart contracts, guiding on optimizing contracts for gas efficiency, considering storage layout and function optimization.",
    "tech-stack" : "Solidity Hardhat",
    "domain" : "Solidity Performance Optimization",
    "link" : "rules/solidity-hardhat-cursorrules-prompt-file/solidity-performance-optimization.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Focuses on testing and quality assurance practices for Solidity smart contracts, including different types of tests, continuous integration, and security audits.",
    "tech-stack" : "Solidity Hardhat",
    "domain" : "Solidity Testing And Quality Assurance",
    "link" : "rules/solidity-hardhat-cursorrules-prompt-file/solidity-testing-and-quality-assurance.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule enforces the use of functional components with hooks in React components within the src/components directory.",
    "tech-stack" : "React Query",
    "domain" : "React Functional Components Preference",
    "link" : "rules/react-query-cursorrules-prompt-file/react-functional-components-preference.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule enforces the defined folder structure for a React project, improving organization and maintainability.",
    "tech-stack" : "React Query",
    "domain" : "React Project Folder Structure",
    "link" : "rules/react-query-cursorrules-prompt-file/react-project-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule lists additional instructions for using React Query, including TypeScript usage, error handling, and debugging tools.",
    "tech-stack" : "React Query",
    "domain" : "React Query Additional Instructions",
    "link" : "rules/react-query-cursorrules-prompt-file/react-query-additional-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule outlines the general best practices for using React Query throughout the React project.",
    "tech-stack" : "React Query",
    "domain" : "React Query General Best Practices",
    "link" : "rules/react-query-cursorrules-prompt-file/react-query-general-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule specifies the folder structure and purpose for placing React Query custom hooks in dedicated subdirectories.",
    "tech-stack" : "React Query",
    "domain" : "React Query Hooks Directory Guidelines",
    "link" : "rules/react-query-cursorrules-prompt-file/react-query-hooks-directory-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific guidelines for Django projects, enforcing the use of the latest stable version and best practices.",
    "tech-stack" : "Python TS/TypeScript Guide",
    "domain" : "Django Framework Rules",
    "link" : "rules/python--typescript-guide-cursorrules-prompt-file/django-framework-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for the AI's behavior, focusing on providing accurate and thoughtful answers.",
    "tech-stack" : "Python TS/TypeScript Guide",
    "domain" : "General Ai Behavior Rules",
    "link" : "rules/python--typescript-guide-cursorrules-prompt-file/general-ai-behavior-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for Python and Typescript code to ensure clarity and readability.",
    "tech-stack" : "Python TS/TypeScript Guide",
    "domain" : "Python And Typescript Code Style",
    "link" : "rules/python--typescript-guide-cursorrules-prompt-file/python-and-typescript-code-style.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules for React projects, enforcing the use of the latest stable version and best practices.",
    "tech-stack" : "Python TS/TypeScript Guide",
    "domain" : "React Framework Rules",
    "link" : "rules/python--typescript-guide-cursorrules-prompt-file/react-framework-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for using Tailwind CSS and InertiaJS, including the use of Catalyst components.",
    "tech-stack" : "Python TS/TypeScript Guide",
    "domain" : "Tailwind And Inertiajs Rules",
    "link" : "rules/python--typescript-guide-cursorrules-prompt-file/tailwind-and-inertiajs-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines rules for aligning all aspects of development with project goals.",
    "tech-stack" : "Linux Nvidia Cuda Python",
    "domain" : "Ai Alignment Rules",
    "link" : "rules/linux-nvidia-cuda-python-cursorrules-prompt-file/ai-alignment-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guides continuous improvement by seeking feedback, suggesting enhancements, and documenting changes.",
    "tech-stack" : "Linux Nvidia Cuda Python",
    "domain" : "Continuous Improvement Rules",
    "link" : "rules/linux-nvidia-cuda-python-cursorrules-prompt-file/continuous-improvement-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Governs development principles for python code.",
    "tech-stack" : "Linux Nvidia Cuda Python",
    "domain" : "Development Principles Rules",
    "link" : "rules/linux-nvidia-cuda-python-cursorrules-prompt-file/development-principles-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for keeping all markdown documentation up to date, including the README.md and any necessary instructions or examples.",
    "tech-stack" : "Linux Nvidia Cuda Python",
    "domain" : "Documentation Rules",
    "link" : "rules/linux-nvidia-cuda-python-cursorrules-prompt-file/documentation-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies to the project README file, focusing on providing a simple and usable experience.",
    "tech-stack" : "Linux Nvidia Cuda Python",
    "domain" : "Project Overview Rules",
    "link" : "rules/linux-nvidia-cuda-python-cursorrules-prompt-file/project-overview-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Describes and enforces the preferred folder structure for SolidJS projects, including components, pages, and styles.",
    "tech-stack" : "Solidjs Tailwind",
    "domain" : "Solidjs Folder Structure",
    "link" : "rules/solidjs-tailwind-cursorrules-prompt-file/solidjs-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the use of functional components in SolidJS projects.",
    "tech-stack" : "Solidjs Tailwind",
    "domain" : "Solidjs Functional Components",
    "link" : "rules/solidjs-tailwind-cursorrules-prompt-file/solidjs-functional-components.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides additional instructions to remember when coding with solid and tailwind.",
    "tech-stack" : "Solidjs Tailwind",
    "domain" : "Solidjs Tailwind Additional Instructions",
    "link" : "rules/solidjs-tailwind-cursorrules-prompt-file/solidjs-tailwind-additional-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies best practices for using SolidJS with Tailwind CSS, including state management and styling.",
    "tech-stack" : "Solidjs Tailwind",
    "domain" : "Solidjs Tailwind Css Best Practices",
    "link" : "rules/solidjs-tailwind-cursorrules-prompt-file/solidjs-tailwind-css-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides rules related to the configuration file for Tailwind CSS, focusing on customization.",
    "tech-stack" : "Solidjs Tailwind",
    "domain" : "Tailwind Css Configuration",
    "link" : "rules/solidjs-tailwind-cursorrules-prompt-file/tailwind-css-configuration.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides best practices for styling with Tailwind CSS, including reusable styles, responsive design, and dark mode.",
    "tech-stack" : "Solidjs Tailwind",
    "domain" : "Tailwind Css Styling",
    "link" : "rules/solidjs-tailwind-cursorrules-prompt-file/tailwind-css-styling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies commit message standards to all files in the project.",
    "tech-stack" : "Elixir Engineer Guidelines",
    "domain" : "Commit Message Format",
    "link" : "rules/elixir-engineer-guidelines-cursorrules-prompt-file/commit-message-format.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies to all Elixir files, setting the tone for an expert senior Elixir engineer.",
    "tech-stack" : "Elixir Engineer Guidelines",
    "domain" : "Elixir General Engineering Rule",
    "link" : "rules/elixir-engineer-guidelines-cursorrules-prompt-file/elixir-general-engineering-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides additional instructions for NativeScript development, such as using TypeScript, secure storage and biometrics for sensitive data, nativescript-fonticon for font icons.",
    "tech-stack" : "Nativescript",
    "domain" : "Nativescript Additional Instructions",
    "link" : "rules/nativescript-cursorrules-prompt-file/nativescript---additional-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general NativeScript best practices.",
    "tech-stack" : "Nativescript",
    "domain" : "Nativescript General Best Practices",
    "link" : "rules/nativescript-cursorrules-prompt-file/nativescript---general-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the recommended folder structure for NativeScript projects at the root level, including assets, src, and nativescript.config.ts.",
    "tech-stack" : "Nativescript",
    "domain" : "Nativescript Project Structure",
    "link" : "rules/nativescript-cursorrules-prompt-file/nativescript---project-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specifically for the Next.js configuration file.",
    "tech-stack" : "Next.js TS/TypeScript App",
    "domain" : "Next Js Configuration Rule",
    "link" : "rules/nextjs-typescript-app-cursorrules-prompt-file/next-js-configuration-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for the entire Next.js project, covering technology stack and core libraries.",
    "tech-stack" : "Next.js TS/TypeScript App",
    "domain" : "Next Js Project Rule",
    "link" : "rules/nextjs-typescript-app-cursorrules-prompt-file/next-js-project-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specific to TypeScript files in the project, ensuring consistent code style.",
    "tech-stack" : "Next.js TS/TypeScript App",
    "domain" : "Typescript Code Style Rule",
    "link" : "rules/nextjs-typescript-app-cursorrules-prompt-file/typescript-code-style-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rails 8 specific rules and guidelines for the this project. These rules complement the main .cursorrules file with detailed Rails-specific practices.",
    "tech-stack" : "Rails",
    "domain" : "Rails Basics",
    "link" : "rules/rails-cursorrules-prompt-file/rails-basics.mdx",
    "component-type" : "mdx"
  }, {
    "description" : "Specifies steps to adapt generated React components to the SPA project structure after initial creation.",
    "tech-stack" : "React Components Creation",
    "domain" : "React Component Adaptation Post Generation Spa",
    "link" : "rules/react-components-creation-cursorrules-prompt-file/react-component-adaptation---post-generation-spa.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies steps to adapt generated React components to the project structure after initial creation.",
    "tech-stack" : "React Components Creation",
    "domain" : "React Component Adaptation Post Generation",
    "link" : "rules/react-components-creation-cursorrules-prompt-file/react-component-adaptation---post-generation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidelines for creating React components, emphasizing careful planning, existing component checks, and prompt generation.",
    "tech-stack" : "React Components Creation",
    "domain" : "React Component Creation General",
    "link" : "rules/react-components-creation-cursorrules-prompt-file/react-component-creation---general.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidelines for creating React components, emphasizing careful planning, existing component checks, and prompt generation in SPA.",
    "tech-stack" : "React Components Creation",
    "domain" : "React Component Creation Spa App",
    "link" : "rules/react-components-creation-cursorrules-prompt-file/react-component-creation---spa-app.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides an example prompt template for generating react components with specific instructions.",
    "tech-stack" : "React Components Creation",
    "domain" : "React Component Prompt Example",
    "link" : "rules/react-components-creation-cursorrules-prompt-file/react-component-prompt-example.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces specific development guidelines for Astro projects, including TypeScript strictness and TailwindCSS usage.",
    "tech-stack" : "Astro TS/TypeScript",
    "domain" : "Astro Development Guidelines",
    "link" : "rules/astro-typescript-cursorrules-prompt-file/astro-development-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidelines for creating conventional commit messages, ensuring they adhere to a specific format and are concise.",
    "tech-stack" : "Astro TS/TypeScript",
    "domain" : "Commit Message Guidelines",
    "link" : "rules/astro-typescript-cursorrules-prompt-file/commit-message-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enables custom slash commands, such as /commit, to generate conventional commit messages.",
    "tech-stack" : "Astro TS/TypeScript",
    "domain" : "Custom Slash Commands",
    "link" : "rules/astro-typescript-cursorrules-prompt-file/custom-slash-commands.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Maintains a consistent coding style, ensuring that code starts with a file path comment and prioritizes modularity.",
    "tech-stack" : "Astro TS/TypeScript",
    "domain" : "General Coding Style",
    "link" : "rules/astro-typescript-cursorrules-prompt-file/general-coding-style.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Use TailwindCSS for all styling, keeping the utility-first approach in mind for astro components.",
    "tech-stack" : "Astro TS/TypeScript",
    "domain" : "Tailwindcss Styling Guidelines",
    "link" : "rules/astro-typescript-cursorrules-prompt-file/tailwindcss-styling-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces strict TypeScript settings, ensuring type safety across the project.",
    "tech-stack" : "Astro TS/TypeScript",
    "domain" : "Typescript Development Guidelines",
    "link" : "rules/astro-typescript-cursorrules-prompt-file/typescript-development-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Documentation of the API's and how to use it.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "Api Documentation Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/api-documentation-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Deals with Error handling and validation in all files matching '*Error*'.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "Error Handling And Validation Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/error-handling-and-validation-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Expo Framework-specific guidelines. Includes best practices for Views, Blueprints, and Extensions.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "Expo Framework Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/expo-framework-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General TypeScript rules and guidelines.  Applies to all TypeScript files.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "General Typescript Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/general-typescript-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Deals with i18n in your project.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "Internationalization Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/internationalization-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules pertaining to Mobile UI development. Covers UI/UX best practices, state management, and navigation patterns.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "Mobile Ui Development Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/mobile-ui-development-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines how to name functions, variables and components.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "Naming Conventions Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/naming-conventions-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "React Native specific development rules.  Focuses on UI development and styling within React Native projects.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "React Native Core Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/react-native-core-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies to all files containing Security to ensure proper security practices.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "Security Practices Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/security-practices-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules concerning testing, applies only to __tests__ folder.",
    "tech-stack" : "TS/TypeScript Expo Jest Detox",
    "domain" : "Testing Conventions Rule",
    "link" : "rules/typescript-expo-jest-detox-cursorrules-prompt-file/testing-conventions-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides additional instructions for React Native Expo development, such as using TypeScript, StyleSheet for styling, and Expo's secure store for sensitive data.",
    "tech-stack" : "React Native Expo",
    "domain" : "React Native Expo Additional Instructions",
    "link" : "rules/react-native-expo-cursorrules-prompt-file/react-native-expo---additional-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general React Native Expo best practices within the src directory, such as using functional components with hooks and Expo SDK features.",
    "tech-stack" : "React Native Expo",
    "domain" : "React Native Expo General Best Practices",
    "link" : "rules/react-native-expo-cursorrules-prompt-file/react-native-expo---general-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the recommended folder structure for React Native Expo projects at the root level, including assets, src, App.js, and app.json.",
    "tech-stack" : "React Native Expo",
    "domain" : "React Native Expo Project Structure",
    "link" : "rules/react-native-expo-cursorrules-prompt-file/react-native-expo---project-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific configuration guidelines for the root level files App.js and app.json",
    "tech-stack" : "React Native Expo",
    "domain" : "React Native Expo Root Files",
    "link" : "rules/react-native-expo-cursorrules-prompt-file/react-native-expo---root-files.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules pertaining to Composer dependency management, promoting best practices for declaring and updating dependencies.",
    "tech-stack" : "Plasticode Telegram Api",
    "domain" : "Composer Dependency Management",
    "link" : "rules/plasticode-telegram-api-cursorrules-prompt-file/composer-dependency-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general PHP coding standards and practices to all PHP files in the project, emphasizing object-oriented programming and error handling.",
    "tech-stack" : "Plasticode Telegram Api",
    "domain" : "Php General Rules",
    "link" : "rules/plasticode-telegram-api-cursorrules-prompt-file/php-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules for files within the Plasticode framework directory, focusing on dependency management and Plasticode conventions.",
    "tech-stack" : "Plasticode Telegram Api",
    "domain" : "Plasticode Rules",
    "link" : "rules/plasticode-telegram-api-cursorrules-prompt-file/plasticode-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for files related to the Telegram Bot API integration, emphasizing API-specific best practices.",
    "tech-stack" : "Plasticode Telegram Api",
    "domain" : "Telegram Bot Api Rules",
    "link" : "rules/plasticode-telegram-api-cursorrules-prompt-file/telegram-bot-api-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies best practices for logging, project structure, and environment variable usage specifically to the main application file.",
    "tech-stack" : "Htmx Go Fiber",
    "domain" : "Fiber Logging And Project Structure",
    "link" : "rules/htmx-go-fiber-cursorrules-prompt-file/fiber-logging-and-project-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Focuses on routing, CSRF protection, context handling, and template usage within the internal handlers directory.",
    "tech-stack" : "Htmx Go Fiber",
    "domain" : "Fiber Routing And Csrf Protection",
    "link" : "rules/htmx-go-fiber-cursorrules-prompt-file/fiber-routing-and-csrf-protection.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general best practices for HTMX, Go, and Fiber development to Go files. Focuses on Fiber framework usage.",
    "tech-stack" : "Htmx Go Fiber",
    "domain" : "Htmx Go And Fiber Best Practices General",
    "link" : "rules/htmx-go-fiber-cursorrules-prompt-file/htmx-go-and-fiber-best-practices-general.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces specific folder structure at root level.",
    "tech-stack" : "Htmx Go Fiber",
    "domain" : "Recommended Folder Structure",
    "link" : "rules/htmx-go-fiber-cursorrules-prompt-file/recommended-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Promotes AI-friendly coding practices in Python files, including descriptive names, type hints, detailed comments, and rich error context.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Ai Friendly Coding Practices Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-ai-friendly-coding-practices-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Implements CI/CD pipelines using GitHub Actions or GitLab CI for automated building, testing, and deployment processes.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Ci Cd Implementation Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-ci-cd-implementation-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures code style consistency using Ruff for Python files to maintain a clean and uniform codebase.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Code Style Consistency Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-code-style-consistency-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Handles configuration management using environment variables within the 'config' directory for flexible and maintainable application settings.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Configuration Management Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-configuration-management-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies dependency management using Rye and virtual environments for consistent and isolated project dependencies.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Dependency Management Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-dependency-management-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Promotes detailed documentation within Python files using docstrings and README files to enhance code understanding and maintainability.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Documentation Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-documentation-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Emphasizes robust error handling and logging practices in Python files, including context capture for detailed debugging information.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Error Handling And Logging Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-error-handling-and-logging-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Promotes modular design within the 'src' directory by organizing code into distinct files for models, services, controllers, and utilities.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Modular Design Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-modular-design-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces a clear project structure for all Python projects, advocating for separate directories for source code, tests, docs, and configuration.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Project Structure Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-project-structure-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies comprehensive testing practices using pytest within the 'tests' directory to ensure code reliability and quality.",
    "tech-stack" : "Python Projects Guide",
    "domain" : "Python Testing With Pytest Rule",
    "link" : "rules/python-projects-guide-cursorrules-prompt-file/python-testing-with-pytest-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule reminds the AI to check the x.md file for the current file contents and implementations.",
    "tech-stack" : "Github Code Quality",
    "domain" : "Check X Md Content Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/check-x-md-content-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule instructs the AI to make changes file by file, allowing the user to review each change individually.",
    "tech-stack" : "Github Code Quality",
    "domain" : "File By File Changes Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/file-by-file-changes-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule prevents the AI from using apologies in its responses.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Apologies Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-apologies-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule instructs the AI not to show or discuss the current implementation unless specifically requested.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Current Implementation Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-current-implementation-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule prevents the AI from asking the user to verify implementations that are visible in the provided context.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Implementation Checks Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-implementation-checks-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule restricts the AI from inventing changes beyond what is explicitly requested.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Inventions Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-inventions-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule instructs the AI not to consider any previous x.md files in its memory, ensuring it treats each run independently.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Previous X Md Consideration Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-previous-x-md-consideration-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule instructs the AI not to summarize changes made.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Summaries Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-summaries-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule instructs the AI to avoid providing feedback about understanding in comments or documentation.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Understanding Feedback Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-understanding-feedback-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule prevents the AI from asking for confirmation of information already provided in the context.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Unnecessary Confirmations Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-unnecessary-confirmations-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule instructs the AI not to suggest updates or changes to files when there are no actual modifications needed.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Unnecessary Updates Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-unnecessary-updates-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule prevents the AI from suggesting whitespace changes.",
    "tech-stack" : "Github Code Quality",
    "domain" : "No Whitespace Suggestions Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/no-whitespace-suggestions-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule instructs the AI to preserve existing code and functionalities, avoiding unnecessary removal of code.",
    "tech-stack" : "Github Code Quality",
    "domain" : "Preserve Existing Code Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/preserve-existing-code-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule ensures the AI provides links to the real files instead of placeholder names like x.md.",
    "tech-stack" : "Github Code Quality",
    "domain" : "Provide Real File Links Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/provide-real-file-links-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule requires the AI to provide all edits in a single chunk, avoiding multiple-step instructions for the same file.",
    "tech-stack" : "Github Code Quality",
    "domain" : "Single Chunk Edits Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/single-chunk-edits-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "This rule ensures that the AI always verifies information before presenting it, avoiding assumptions and speculation.",
    "tech-stack" : "Github Code Quality",
    "domain" : "Verify Information Rule",
    "link" : "rules/github-code-quality-cursorrules-prompt-file/verify-information-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for data handling and preprocessing scripts in chemistry ML projects, emphasizing robust pipelines and appropriate techniques for chemical data.",
    "tech-stack" : "Pytorch Scikit Learn",
    "domain" : "Chemistry Ml Data Handling And Preprocessing",
    "link" : "rules/pytorch-scikit-learn-cursorrules-prompt-file/chemistry-ml---data-handling-and-preprocessing.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General Python guidelines for chemistry machine learning projects, including code style, naming conventions, and documentation.",
    "tech-stack" : "Pytorch Scikit Learn",
    "domain" : "Chemistry Ml General Python",
    "link" : "rules/pytorch-scikit-learn-cursorrules-prompt-file/chemistry-ml---general-python.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for model evaluation and interpretation scripts in chemistry ML projects, emphasizing appropriate metrics, error analysis, and visualization techniques.",
    "tech-stack" : "Pytorch Scikit Learn",
    "domain" : "Chemistry Ml Model Evaluation And Interpretation",
    "link" : "rules/pytorch-scikit-learn-cursorrules-prompt-file/chemistry-ml---model-evaluation-and-interpretation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for deep learning model development with PyTorch in chemistry applications, including network architecture, batch processing, and optimization techniques.",
    "tech-stack" : "Pytorch Scikit Learn",
    "domain" : "Chemistry Ml Pytorch Models",
    "link" : "rules/pytorch-scikit-learn-cursorrules-prompt-file/chemistry-ml---pytorch-models.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific guidance regarding the usage of RDKit and related cheminformatics libraries",
    "tech-stack" : "Pytorch Scikit Learn",
    "domain" : "Chemistry Ml Rdkit Usage",
    "link" : "rules/pytorch-scikit-learn-cursorrules-prompt-file/chemistry-ml---rdkit-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for ensuring reproducibility and proper version control in chemistry machine learning projects.",
    "tech-stack" : "Pytorch Scikit Learn",
    "domain" : "Chemistry Ml Reproducibility And Version Control",
    "link" : "rules/pytorch-scikit-learn-cursorrules-prompt-file/chemistry-ml---reproducibility-and-version-control.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for developing machine learning models using scikit-learn in chemistry applications, focusing on algorithm selection, hyperparameter tuning, and cross-validation.",
    "tech-stack" : "Pytorch Scikit Learn",
    "domain" : "Chemistry Ml Scikit Learn Models",
    "link" : "rules/pytorch-scikit-learn-cursorrules-prompt-file/chemistry-ml---scikit-learn-models.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for integrating machine learning models with a Tauri frontend via a backend like Flask",
    "tech-stack" : "Pytorch Scikit Learn",
    "domain" : "Chemistry Ml Tauri Integration",
    "link" : "rules/pytorch-scikit-learn-cursorrules-prompt-file/chemistry-ml---tauri-integration.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for implementing testing and validation procedures specific to chemistry applications.",
    "tech-stack" : "Pytorch Scikit Learn",
    "domain" : "Chemistry Ml Testing And Validation",
    "link" : "rules/pytorch-scikit-learn-cursorrules-prompt-file/chemistry-ml---testing-and-validation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for Swift and SwiftUI coding style, focusing on maintainability and latest documentation.",
    "tech-stack" : "Swiftui Guidelines",
    "domain" : "Swiftui General Rules",
    "link" : "rules/swiftui-guidelines-cursorrules-prompt-file/swiftui-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces a specific project structure for SwiftUI projects with main files, views, shared components, models, view models, services, utilities, resources and tests.",
    "tech-stack" : "Swiftui Guidelines",
    "domain" : "Swiftui Project Structure Rules",
    "link" : "rules/swiftui-guidelines-cursorrules-prompt-file/swiftui-project-structure-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for designing UIs in SwiftUI, including the use of built-in components, layout tools, visual flair, and interactive elements.",
    "tech-stack" : "Swiftui Guidelines",
    "domain" : "Swiftui Ui Design Rules",
    "link" : "rules/swiftui-guidelines-cursorrules-prompt-file/swiftui-ui-design-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures helpful comments are added to the code and that old, relevant comments are preserved.",
    "tech-stack" : "Next.js Seo Dev",
    "domain" : "General Code Commenting",
    "link" : "rules/nextjs-seo-dev-cursorrules-prompt-file/general-code-commenting.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Apply the specified rules for next js projects",
    "tech-stack" : "Next.js Seo Dev",
    "domain" : "Next Js Project Rules",
    "link" : "rules/nextjs-seo-dev-cursorrules-prompt-file/next-js-project-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Protects lines with the specific 'Do not touch this line Cursor' comment within package.json.",
    "tech-stack" : "Next.js Seo Dev",
    "domain" : "Package Json Modification Protection",
    "link" : "rules/nextjs-seo-dev-cursorrules-prompt-file/package-json-modification-protection.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules for Angular components, tailored for standalone components without modules.",
    "tech-stack" : "Angular Novo Elements",
    "domain" : "Angular Standalone Component Rules",
    "link" : "rules/angular-novo-elements-cursorrules-prompt-file/angular-standalone-component-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces coding standards, consistent naming conventions, and discourages the use of deprecated features.",
    "tech-stack" : "Angular Novo Elements",
    "domain" : "Code Style And Formatting Rules",
    "link" : "rules/angular-novo-elements-cursorrules-prompt-file/code-style-and-formatting-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies practices for debugging and testing, including logging, unit tests, and ensuring all tests pass.",
    "tech-stack" : "Angular Novo Elements",
    "domain" : "Debugging And Testing Rules",
    "link" : "rules/angular-novo-elements-cursorrules-prompt-file/debugging-and-testing-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Outlines guidelines for development steps, emphasizing incremental changes, thorough testing, and clear documentation.",
    "tech-stack" : "Angular Novo Elements",
    "domain" : "Development Process Rules",
    "link" : "rules/angular-novo-elements-cursorrules-prompt-file/development-process-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines basic interaction and response guidelines for the AI, including verification and human-like communication.",
    "tech-stack" : "Angular Novo Elements",
    "domain" : "General Behavior Rules",
    "link" : "rules/angular-novo-elements-cursorrules-prompt-file/general-behavior-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies fundamental coding principles like DRY, KISS, YAGNI, and the Boy Scout Rule to all files in the project.",
    "tech-stack" : "Angular Novo Elements",
    "domain" : "General Coding Principles",
    "link" : "rules/angular-novo-elements-cursorrules-prompt-file/general-coding-principles.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specific to integrating Novo Elements library, including referencing documentation and GitHub repository.",
    "tech-stack" : "Angular Novo Elements",
    "domain" : "Novo Elements Integration Rules",
    "link" : "rules/angular-novo-elements-cursorrules-prompt-file/novo-elements-integration-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Maintains project structure, emphasizes meaningful names for files/directories, and avoids unnecessary clutter.",
    "tech-stack" : "Angular Novo Elements",
    "domain" : "Project Structure Rules",
    "link" : "rules/angular-novo-elements-cursorrules-prompt-file/project-structure-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rule set for Kotlin coding best practices in Spring Boot applications.",
    "tech-stack" : "Kotlin Springboot Best Practices",
    "domain" : "Kotlin Springboot Rules",
    "link" : "rules/kotlin-springboot-best-practices-cursorrules-prompt-file/kotlin-springboot-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specific to Flutter projects, including directory structure, feature organization, and naming conventions to ensure a scalable and maintainable codebase.",
    "tech-stack" : "Flutter Riverpod",
    "domain" : "Flutter Project Rules",
    "link" : "rules/flutter-riverpod-cursorrules-prompt-file/flutter-project-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General instructions for the AI assistant to follow when executing tasks, including analysis, execution, quality control, and reporting.",
    "tech-stack" : "Flutter Riverpod",
    "domain" : "General Ai Assistant Instructions",
    "link" : "rules/flutter-riverpod-cursorrules-prompt-file/general-ai-assistant-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the tech stack to be used, including AI Model, Frontend framework (Flutter), State Management (Riverpod), and BaaS (Firebase).",
    "tech-stack" : "Flutter Riverpod",
    "domain" : "Tech Stack Configuration",
    "link" : "rules/flutter-riverpod-cursorrules-prompt-file/tech-stack-configuration.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the persona of an elite software engineer and product manager to be used across all files, emphasizing the use of expertise and libraries effectively.",
    "tech-stack" : "TS/TypeScript Axios",
    "domain" : "Elite Software Engineer And Product Manager",
    "link" : "rules/typescript-axios-cursorrules-prompt-file/elite-software-engineer-and-product-manager.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines general rules for Python development within the service-1 directory, focusing on dependency management, Python version, and code structure.",
    "tech-stack" : "TS/TypeScript Axios",
    "domain" : "General Python Rules",
    "link" : "rules/typescript-axios-cursorrules-prompt-file/general-python-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for TypeScript, React, and Tailwind projects. This rule applies to all JavaScript/TypeScript files.",
    "tech-stack" : "TS/TypeScript Next.js React",
    "domain" : "General Typescript React Tailwind Rules",
    "link" : "rules/typescript-nextjs-react-cursorrules-prompt-file/general-typescript-react-tailwind-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for Next.js 14 App Router projects. This rule applies to all files within the 'app' directory.",
    "tech-stack" : "TS/TypeScript Next.js React",
    "domain" : "Next Js App Router Data Fetching Rendering And Routing Rules",
    "link" : "rules/typescript-nextjs-react-cursorrules-prompt-file/next-js-app-router-data-fetching-rendering-and-routing-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for using pre-configured APIs in the project, using them only if they are required by the project.",
    "tech-stack" : "TS/TypeScript Next.js React",
    "domain" : "Pre Configured Apis Rules",
    "link" : "rules/typescript-nextjs-react-cursorrules-prompt-file/pre-configured-apis-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for using the Vercel AI SDK in the project. This rule applies to all JavaScript/TypeScript files.",
    "tech-stack" : "TS/TypeScript Next.js React",
    "domain" : "Vercel Ai Sdk Rules",
    "link" : "rules/typescript-nextjs-react-cursorrules-prompt-file/vercel-ai-sdk-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces FastAPI best practices for application code within the 'app' directory, including data validation, dependency injection, and asynchronous operations.",
    "tech-stack" : "Python FastAPI",
    "domain" : "Fastapi Best Practices",
    "link" : "rules/python-fastapi-cursorrules-prompt-file/fastapi-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the recommended folder structure for FastAPI projects to maintain organization and separation of concerns within the 'app' directory.",
    "tech-stack" : "Python FastAPI",
    "domain" : "Fastapi Folder Structure",
    "link" : "rules/python-fastapi-cursorrules-prompt-file/fastapi-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies guidelines for the main application file in FastAPI projects, focusing on application initialization and configuration.",
    "tech-stack" : "Python FastAPI",
    "domain" : "Fastapi Main Application File",
    "link" : "rules/python-fastapi-cursorrules-prompt-file/fastapi-main-application-file.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for defining Pydantic models within the models directory of a FastAPI project to ensure data validation and serialization.",
    "tech-stack" : "Python FastAPI",
    "domain" : "Pydantic Models",
    "link" : "rules/python-fastapi-cursorrules-prompt-file/pydantic-models.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general Python coding standards, including type hinting, input validation with Pydantic, background tasks, CORS handling, security utilities, PEP 8 compliance, and comprehensive testing.",
    "tech-stack" : "Python FastAPI",
    "domain" : "Python General Coding Standards",
    "link" : "rules/python-fastapi-cursorrules-prompt-file/python-general-coding-standards.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rule for backend development expertise across the project.",
    "tech-stack" : "Go Backend Scalability",
    "domain" : "Backend General Expert",
    "link" : "rules/go-backend-scalability-cursorrules-prompt-file/backend-general-expert.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Best practices when interacting with databases in backend Go code.",
    "tech-stack" : "Go Backend Scalability",
    "domain" : "Database Interaction Best Practices",
    "link" : "rules/go-backend-scalability-cursorrules-prompt-file/database-interaction-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific guidelines for implementing gRPC services in Go.",
    "tech-stack" : "Go Backend Scalability",
    "domain" : "Go Grpc Service Rule",
    "link" : "rules/go-backend-scalability-cursorrules-prompt-file/go-grpc-service-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rule for handling Protocol Buffer definition files in the project.",
    "tech-stack" : "Go Backend Scalability",
    "domain" : "Protocol Buffer Definitions Rule",
    "link" : "rules/go-backend-scalability-cursorrules-prompt-file/protocol-buffer-definitions-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for naming components and structuring directories within the src/components folder, including conventions for lowercase names with dashes.",
    "tech-stack" : "Next.js React Tailwind",
    "domain" : "Component Naming And Directory Structure",
    "link" : "rules/nextjs-react-tailwind-cursorrules-prompt-file/component-naming-and-directory-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for TypeScript, Node.js, and Next.js projects, covering code style, naming conventions, and TypeScript usage.",
    "tech-stack" : "Next.js React Tailwind",
    "domain" : "General Typescript Node Js Next Js Rules",
    "link" : "rules/nextjs-react-tailwind-cursorrules-prompt-file/general-typescript-node-js-next-js-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for adhering to Next.js conventions, including data fetching, rendering, routing, and using 'nuqs' for URL search parameter state management.",
    "tech-stack" : "Next.js React Tailwind",
    "domain" : "Next Js Conventions And Best Practices",
    "link" : "rules/nextjs-react-tailwind-cursorrules-prompt-file/next-js-conventions-and-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for performance optimization in Next.js applications, including minimizing client-side logic, using Suspense, and optimizing images.",
    "tech-stack" : "Next.js React Tailwind",
    "domain" : "Performance Optimization Rules",
    "link" : "rules/nextjs-react-tailwind-cursorrules-prompt-file/performance-optimization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rule to use placekitten.com for placeholder images in seed data.",
    "tech-stack" : "Next.js React Tailwind",
    "domain" : "Placeholder Images",
    "link" : "rules/nextjs-react-tailwind-cursorrules-prompt-file/placeholder-images.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for determining if a component should be private or shared, and where to place them based on their use-case.",
    "tech-stack" : "Next.js React Tailwind",
    "domain" : "Private Vs Shared Components",
    "link" : "rules/nextjs-react-tailwind-cursorrules-prompt-file/private-vs-shared-components.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for UI development and styling using Shadcn UI and Tailwind CSS, emphasizing responsive design and a mobile-first approach.",
    "tech-stack" : "Next.js React Tailwind",
    "domain" : "Ui And Styling With Shadcn Ui And Tailwind",
    "link" : "rules/nextjs-react-tailwind-cursorrules-prompt-file/ui-and-styling-with-shadcn-ui-and-tailwind.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies best practices for Qwik.js development with Tailwind CSS, including using specific suffixes, reactive state management, and styling approaches.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Qwik And Tailwind Best Practices",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/qwik-and-tailwind-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Encourages the use of Qwik City for routing within Qwik applications when applicable.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Qwik City Routing",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/qwik-city-routing.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends a specific folder structure for Qwik projects to maintain organization and separation of concerns. Applies to the project root.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Qwik Folder Structure",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/qwik-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the use of functional components within Qwik projects, promoting a consistent and modern coding style.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Qwik Functional Components Preference",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/qwik-functional-components-preference.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Instructs using server$ for server-side code execution within Qwik components.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Qwik Server Side Code",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/qwik-server-side-code.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Stresses following both Qwik and Tailwind naming conventions for consistency and readability.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Qwik Tailwind Naming Conventions",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/qwik-tailwind-naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Mandates the use of TypeScript for all .ts and .tsx files in Qwik projects to ensure type safety and improved code maintainability.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Qwik Typescript Usage",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/qwik-typescript-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Instructs the implementation of proper Tailwind CSS purging for production builds to reduce the final CSS bundle size.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Tailwind Css Purging",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/tailwind-css-purging.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Suggests using Tailwind's @layer directive for custom styles to maintain organization and prevent conflicts.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Tailwind Custom Styles",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/tailwind-custom-styles.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends implementing dark mode using Tailwind's dark variant to provide a user-friendly experience.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Tailwind Dark Mode",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/tailwind-dark-mode.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Encourages leveraging Vite plugins for optimized Qwik builds to improve performance and efficiency.",
    "tech-stack" : "Qwik Tailwind",
    "domain" : "Vite Plugins For Qwik",
    "link" : "rules/qwik-tailwind-cursorrules-prompt-file/vite-plugins-for-qwik.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the use of functional components in SolidJS TypeScript files. This rule promotes a consistent and modern approach to component design in SolidJS projects.",
    "tech-stack" : "Solidjs TS/TypeScript",
    "domain" : "Solidjs Functional Components Preference",
    "link" : "rules/solidjs-typescript-cursorrules-prompt-file/solidjs-functional-components-preference.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the recommended folder structure for SolidJS projects under the src directory. This ensures a standardized and maintainable project layout.",
    "tech-stack" : "Solidjs TS/TypeScript",
    "domain" : "Solidjs Project Folder Structure",
    "link" : "rules/solidjs-typescript-cursorrules-prompt-file/solidjs-project-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies best practices for using SolidJS with TypeScript. This includes using typed reactive state, proper type definitions, and strict TypeScript mode.",
    "tech-stack" : "Solidjs TS/TypeScript",
    "domain" : "Solidjs Typescript Best Practices",
    "link" : "rules/solidjs-typescript-cursorrules-prompt-file/solidjs-typescript-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines additional coding standards for SolidJS and TypeScript. This includes using the .tsx extension, implementing strict TypeScript checks, and utilizing Solid Router with proper typing.",
    "tech-stack" : "Solidjs TS/TypeScript",
    "domain" : "Solidjs Typescript Coding Standards",
    "link" : "rules/solidjs-typescript-cursorrules-prompt-file/solidjs-typescript-coding-standards.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines general rules for tsconfig.json. It suggest using strict TypeScript checks",
    "tech-stack" : "Solidjs TS/TypeScript",
    "domain" : "Tsconfig Json Rules",
    "link" : "rules/solidjs-typescript-cursorrules-prompt-file/tsconfig-json-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Advises using Django's class-based views when constructing HTMX responses in view files. Class-based views provide a structured way to handle different HTTP methods.",
    "tech-stack" : "Htmx Django",
    "domain" : "Django Class Based Views For Htmx",
    "link" : "rules/htmx-django-cursorrules-prompt-file/django-class-based-views-for-htmx.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies that Django forms should be used when handling form inputs in Python files named forms.py. This rule ensures consistent form handling practices within the project.",
    "tech-stack" : "Htmx Django",
    "domain" : "Django Form Handling",
    "link" : "rules/htmx-django-cursorrules-prompt-file/django-form-handling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends utilizing Django's middleware for handling request and response processing. Middleware allows for global actions to be performed on requests and responses.",
    "tech-stack" : "Htmx Django",
    "domain" : "Django Middleware For Request Response",
    "link" : "rules/htmx-django-cursorrules-prompt-file/django-middleware-for-request-response.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies that Django's ORM should be used for interacting with the database when defining models. This encourages a consistent approach to database operations across the project.",
    "tech-stack" : "Htmx Django",
    "domain" : "Django Orm For Database Operations",
    "link" : "rules/htmx-django-cursorrules-prompt-file/django-orm-for-database-operations.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the use of Django's staticfiles app for managing static assets within the 'static' directory.  This promotes consistent and efficient management of CSS, JavaScript, and other static files.",
    "tech-stack" : "Htmx Django",
    "domain" : "Django Static Files Management",
    "link" : "rules/htmx-django-cursorrules-prompt-file/django-static-files-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures Django's URL routing system is used in URL configuration files. This promotes consistent and maintainable URL management across Django projects.",
    "tech-stack" : "Htmx Django",
    "domain" : "Django Url Routing",
    "link" : "rules/htmx-django-cursorrules-prompt-file/django-url-routing.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Encourages adhering to Django's best practices for project structure, especially in settings files. This promotes maintainability and standardization across Django projects.",
    "tech-stack" : "Htmx Django",
    "domain" : "General Django Project Structure",
    "link" : "rules/htmx-django-cursorrules-prompt-file/general-django-project-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies best practices for HTMX and Django integration, focusing on template usage within the 'templates' directory. It encourages using Django's templating engine with HTMX attributes.",
    "tech-stack" : "Htmx Django",
    "domain" : "Htmx And Django Best Practices General",
    "link" : "rules/htmx-django-cursorrules-prompt-file/htmx-and-django-best-practices---general.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidance on initial data exploration steps within data analysis scripts, including summary statistics and data validation.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Data Analysis Initial Exploration",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/data-analysis-initial-exploration.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines rules for creating informative and visually appealing plots using matplotlib and seaborn, emphasizing proper labels, titles, legends, and color schemes.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Data Visualization Rules",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/data-visualization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for creating informative and visually appealing plots using matplotlib and seaborn, with considerations for accessibility.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Data Visualization With Matplotlib And Seaborn",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/data-visualization-with-matplotlib-and-seaborn.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Governs error handling and data validation practices, including data quality checks, missing data handling, and data type validation.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Error Handling And Data Validation Rules",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/error-handling-and-data-validation-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general guidelines for data analysis, visualization, and Jupyter Notebook development with Python, focusing on best practices with pandas, matplotlib, and seaborn.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "General Data Analysis And Jupyter Notebook Rules",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/general-data-analysis-and-jupyter-notebook-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets the convention to begin any analysis with data exploration and summary statistics, providing a consistent starting point.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Initial Data Analysis Steps",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/initial-data-analysis-steps.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for structuring and documenting Jupyter notebooks for reproducibility and clarity.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Jupyter Notebook Best Practices",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/jupyter-notebook-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific optimization strategies for Python scripts working with larger-than-memory datasets via Dask.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Large Data With Dask",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/large-data-with-dask.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Focuses on pandas-specific rules for data manipulation, including method chaining, data selection using loc/iloc, and groupby operations.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Pandas Data Manipulation Rules",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/pandas-data-manipulation-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Outlines rules for optimizing performance, including vectorized operations, efficient data structures, and profiling code for bottlenecks.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Performance Optimization Rules",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/performance-optimization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for Python data analysis and manipulation, emphasizing pandas, numpy, and vectorized operations.",
    "tech-stack" : "Pandas Scikit Learn Guide",
    "domain" : "Python Data Analysis General",
    "link" : "rules/pandas-scikit-learn-guide-cursorrules-prompt-file/python-data-analysis-general.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces consistent code style and structure across the project, including concise code, functional programming, and descriptive variable names.",
    "tech-stack" : "TS/TypeScript Vite Tailwind",
    "domain" : "Code Style And Structure Rule",
    "link" : "rules/typescript-vite-tailwind-cursorrules-prompt-file/code-style-and-structure-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general TypeScript best practices, including using interfaces, avoiding enums, and using functional components.",
    "tech-stack" : "TS/TypeScript Vite Tailwind",
    "domain" : "General Typescript Rule",
    "link" : "rules/typescript-vite-tailwind-cursorrules-prompt-file/general-typescript-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rule for performance optimization that includes lazy loading, image optimization, and Web Vitals.",
    "tech-stack" : "TS/TypeScript Vite Tailwind",
    "domain" : "Performance Optimization Rule",
    "link" : "rules/typescript-vite-tailwind-cursorrules-prompt-file/performance-optimization-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Outlines optimization strategies for Vite build processes, including chunking, code splitting, and image optimization techniques.",
    "tech-stack" : "TS/TypeScript Vite Tailwind",
    "domain" : "Vite Build Optimization Rule",
    "link" : "rules/typescript-vite-tailwind-cursorrules-prompt-file/vite-build-optimization-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the style and structure for Vue.js components, including naming conventions, composition API usage, and UI library preferences.",
    "tech-stack" : "TS/TypeScript Vite Tailwind",
    "domain" : "Vue Js Component Rule",
    "link" : "rules/typescript-vite-tailwind-cursorrules-prompt-file/vue-js-component-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Encourages leveraging VueUse functions throughout the project to enhance reactivity and performance.",
    "tech-stack" : "TS/TypeScript Vite Tailwind",
    "domain" : "Vueuse Library Rule",
    "link" : "rules/typescript-vite-tailwind-cursorrules-prompt-file/vueuse-library-rule.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Additional instructions for Vue 3 development, covering areas like error handling, styling and best practices.",
    "tech-stack" : "Vue3 Composition Api",
    "domain" : "Vue 3 Additional Instructions",
    "link" : "rules/vue3-composition-api-cursorrules-prompt-file/vue-3-additional-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules for composables in the Vue 3 Composition API. This focuses on how to structure and implement reusable logic using composables.",
    "tech-stack" : "Vue3 Composition Api",
    "domain" : "Vue 3 Composition Api Composables",
    "link" : "rules/vue3-composition-api-cursorrules-prompt-file/vue-3-composition-api---composables.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General guidelines for Vue 3 components using the Composition API. This includes best practices and recommendations for component structure and reactive state management.",
    "tech-stack" : "Vue3 Composition Api",
    "domain" : "Vue 3 Composition Api General",
    "link" : "rules/vue3-composition-api-cursorrules-prompt-file/vue-3-composition-api---general.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the recommended folder structure for a Vue 3 project to maintain consistency and organization.",
    "tech-stack" : "Vue3 Composition Api",
    "domain" : "Vue 3 Project Structure",
    "link" : "rules/vue3-composition-api-cursorrules-prompt-file/vue-3-project-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the use of TypeScript for type safety in Vue 3 projects, especially for .ts files.",
    "tech-stack" : "Vue3 Composition Api",
    "domain" : "Vue 3 Typescript Guidelines",
    "link" : "rules/vue3-composition-api-cursorrules-prompt-file/vue-3-typescript-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Accessibility features for React components built with Chakra UI.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "Chakra Ui Accessibility Features",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/chakra-ui---accessibility-features.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensuring that React components are built composably using Chakra UI components.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "Chakra Ui Component Composition",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/chakra-ui---component-composition.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Implement dark mode using Chakra UI's color mode when building React components.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "Chakra Ui Dark Mode Implementation",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/chakra-ui---dark-mode-implementation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Following Chakra UI best practices for optimizing React components for performance.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "Chakra Ui Performance Optimization",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/chakra-ui---performance-optimization.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Utilize Chakra UI's layout components for creating responsive designs in React applications.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "Chakra Ui Responsive Design",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/chakra-ui---responsive-design.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Use the 'as' prop for semantic HTML rendering when working with Chakra UI components.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "Chakra Ui Semantic Html Rendering",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/chakra-ui---semantic-html-rendering.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules specific to the theme directory for managing and customizing the Chakra UI theme.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "Chakra Ui Theme Directory Rules",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/chakra-ui---theme-directory-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces Chakra UI best practices to maintain consistency and leverage the framework's capabilities.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "Chakra Ui Best Practices",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/chakra-ui-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Maintain the defined folder structure for React and Chakra UI projects to ensure organized code.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "React Chakra Ui Folder Structure",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/react-chakra-ui---folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General preferences for React components using Chakra UI, including the use of functional components with hooks.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "React Chakra Ui General Preferences",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/react-chakra-ui---general-preferences.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Utilize Typescript for type safety when using React components with Chakra UI.",
    "tech-stack" : "React Chakra Ui",
    "domain" : "React Chakra Ui Typescript Usage",
    "link" : "rules/react-chakra-ui-cursorrules-prompt-file/react-chakra-ui---typescript-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Accessibility rules for Svelte and SvelteKit",
    "tech-stack" : "Web App Optimization",
    "domain" : "Accessibility Rules",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/accessibility-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Configuration management techniques",
    "tech-stack" : "Web App Optimization",
    "domain" : "Configuration Management",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/configuration-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Describes Form and Actions implementations.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Form And Actions In Sveltekit",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/form-and-actions-in-sveltekit.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Details Paraglide.js i18n implementations.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Paraglide Js Internationalization I18n",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/paraglide-js-internationalization-i18n.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Performance Optimization techniques for Svelte and SvelteKit projects.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Performance Optimization Techniques",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/performance-optimization-techniques.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides SEO and Meta Tags guidelines in SvelteKit.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Seo And Meta Tags In Sveltekit",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/seo-and-meta-tags-in-sveltekit.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general Svelte and SvelteKit best practices, including file structure, component development, and state management.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Svelte And Sveltekit General Rules",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/svelte-and-sveltekit-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidelines for using Svelte 5 runes ($state, $derived, $effect, $props, $bindable, $inspect) for reactive state management and lifecycle events.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Svelte Runes Usage",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/svelte-runes-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines best practices for API routes in SvelteKit, focusing on request handling, response formatting, and global middleware.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Sveltekit Api Routes",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/sveltekit-api-routes.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the recommended SvelteKit project structure.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Sveltekit Project Structure",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/sveltekit-project-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies routing conventions in SvelteKit projects.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Sveltekit Routing And Pages",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/sveltekit-routing-and-pages.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies Server-Side Rendering and Static Site Generation",
    "tech-stack" : "Web App Optimization",
    "domain" : "Sveltekit Ssr And Ssg",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/sveltekit-ssr-and-ssg.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines UI and styling conventions using Tailwind CSS and Shadcn components, emphasizing utility-first styling and reusable UI elements.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Tailwind Css And Shadcn Ui Conventions",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/tailwind-css-and-shadcn-ui-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces TypeScript best practices within Svelte component logic files, including interface usage, avoiding enums, and strict mode.",
    "tech-stack" : "Web App Optimization",
    "domain" : "Typescript Rules For Svelte Components",
    "link" : "rules/web-app-optimization-cursorrules-prompt-file/typescript-rules-for-svelte-components.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the use of functional components with hooks in React components.",
    "tech-stack" : "React Redux TS/TypeScript",
    "domain" : "React Functional Components",
    "link" : "rules/react-redux-typescript-cursorrules-prompt-file/react-functional-components.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific instructions when handling Redux async actions",
    "tech-stack" : "React Redux TS/TypeScript",
    "domain" : "Redux Async Actions",
    "link" : "rules/react-redux-typescript-cursorrules-prompt-file/redux-async-actions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends Redux DevTools for debugging Redux applications.",
    "tech-stack" : "React Redux TS/TypeScript",
    "domain" : "Redux Devtools Debugging",
    "link" : "rules/react-redux-typescript-cursorrules-prompt-file/redux-devtools-debugging.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces specific folder structure conventions within the Redux store directory.",
    "tech-stack" : "React Redux TS/TypeScript",
    "domain" : "Redux Folder Structure",
    "link" : "rules/react-redux-typescript-cursorrules-prompt-file/redux-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies Redux Toolkit best practices for efficient Redux development.",
    "tech-stack" : "React Redux TS/TypeScript",
    "domain" : "Redux Toolkit Best Practices",
    "link" : "rules/react-redux-typescript-cursorrules-prompt-file/redux-toolkit-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures TypeScript is used for type safety throughout the project.",
    "tech-stack" : "React Redux TS/TypeScript",
    "domain" : "Typescript Type Safety",
    "link" : "rules/react-redux-typescript-cursorrules-prompt-file/typescript-type-safety.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for Biome configuration.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "Biome Rules",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/biome-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for writing Cairo smart contracts, emphasizing gas efficiency and security.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "Cairo Contract Rules",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/cairo-contract-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules to define development process.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "Development Process Rules",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/development-process-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules to organize Project Structure.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "General Project Structure",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/general-project-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General Rules to set up Typescript.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "General Rules",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general TypeScript best practices to all TypeScript files in the project.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "General Typescript Rules",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/general-typescript-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules for Next.js pages, including routing, data fetching, and image optimization.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "Next Js Page Rules",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/next-js-page-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules to generate prompt.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "Prompt Generation Rules",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/prompt-generation-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines guidelines for creating reusable and maintainable React components.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "React Component Guidelines",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/react-component-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules for Starknet React projects, focusing on blockchain integration.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "Starknet React Rules",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/starknet-react-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for utilizing TailwindCSS and DaisyUI within React components.",
    "tech-stack" : "Tailwind Css Next.js Guide",
    "domain" : "Tailwindcss And Daisyui Rules",
    "link" : "rules/tailwind-css-nextjs-guide-cursorrules-prompt-file/tailwindcss-and-daisyui-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies how to use the custom Drawscape Factorio Python module in Python files.",
    "tech-stack" : "Python Flask Json Guide",
    "domain" : "Drawscape Factorio Usage",
    "link" : "rules/python-flask-json-guide-cursorrules-prompt-file/drawscape-factorio-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines general Python version and dependency management rules for the project.",
    "tech-stack" : "Python Flask Json Guide",
    "domain" : "General Python Rules",
    "link" : "rules/python-flask-json-guide-cursorrules-prompt-file/general-python-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures proper JSON data handling when working with Drawscape Factorio.",
    "tech-stack" : "Python Flask Json Guide",
    "domain" : "Json Data Handling",
    "link" : "rules/python-flask-json-guide-cursorrules-prompt-file/json-data-handling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for ensuring accessibility in React components using tailwind.",
    "tech-stack" : "Tailwind React Firebase",
    "domain" : "Accessibility Rules",
    "link" : "rules/tailwind-react-firebase-cursorrules-prompt-file/accessibility-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for organizing code structure and utilizing custom hooks.",
    "tech-stack" : "Tailwind React Firebase",
    "domain" : "Code Organization Rules",
    "link" : "rules/tailwind-react-firebase-cursorrules-prompt-file/code-organization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Best practices for interacting with Firebase services, including security and optimization.",
    "tech-stack" : "Tailwind React Firebase",
    "domain" : "Firebase Rules",
    "link" : "rules/tailwind-react-firebase-cursorrules-prompt-file/firebase-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules for handling forms in React components.",
    "tech-stack" : "Tailwind React Firebase",
    "domain" : "Form Handling Rules",
    "link" : "rules/tailwind-react-firebase-cursorrules-prompt-file/form-handling-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General UI/UX design best practices for React components using Tailwind CSS.",
    "tech-stack" : "Tailwind React Firebase",
    "domain" : "General Ui Ux Rules",
    "link" : "rules/tailwind-react-firebase-cursorrules-prompt-file/general-ui-ux-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Focuses on rules and best practices for mobile-first design and responsive typography using tailwind.",
    "tech-stack" : "Tailwind React Firebase",
    "domain" : "Mobile First Design Rules",
    "link" : "rules/tailwind-react-firebase-cursorrules-prompt-file/mobile-first-design-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for the AI-powered pill management feature, focusing on tracking user interactions and generating insights.",
    "tech-stack" : "Tailwind React Firebase",
    "domain" : "Pill Management Ai Feature",
    "link" : "rules/tailwind-react-firebase-cursorrules-prompt-file/pill-management-ai-feature.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces the use of functional components with hooks in React files.",
    "tech-stack" : "React Styled Components",
    "domain" : "React Functional Components Preference",
    "link" : "rules/react-styled-components-cursorrules-prompt-file/react-functional-components-preference.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends utilizing styled-components' attrs method for frequently used props.",
    "tech-stack" : "React Styled Components",
    "domain" : "Styled Components Attrs Method",
    "link" : "rules/react-styled-components-cursorrules-prompt-file/styled-components---attrs-method.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends using the css prop for conditional styling in Styled Components when appropriate.",
    "tech-stack" : "React Styled Components",
    "domain" : "Styled Components Conditional Styling Css Prop",
    "link" : "rules/react-styled-components-cursorrules-prompt-file/styled-components---conditional-styling-css-prop.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures all styling is done using CSS-in-JS with Styled Components.",
    "tech-stack" : "React Styled Components",
    "domain" : "Styled Components Css In Js",
    "link" : "rules/react-styled-components-cursorrules-prompt-file/styled-components---css-in-js.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Recommends following the styled-components documentation for best practices.",
    "tech-stack" : "React Styled Components",
    "domain" : "Styled Components Documentation",
    "link" : "rules/react-styled-components-cursorrules-prompt-file/styled-components---documentation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces proper naming conventions for Styled Components.",
    "tech-stack" : "React Styled Components",
    "domain" : "Styled Components Naming Conventions",
    "link" : "rules/react-styled-components-cursorrules-prompt-file/styled-components---naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the use of a consistent theming system with Styled Components.",
    "tech-stack" : "React Styled Components",
    "domain" : "Styled Components Theming",
    "link" : "rules/react-styled-components-cursorrules-prompt-file/styled-components---theming.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures proper TypeScript support for styled-components.",
    "tech-stack" : "React Styled Components",
    "domain" : "Styled Components Typescript Support",
    "link" : "rules/react-styled-components-cursorrules-prompt-file/styled-components---typescript-support.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies best practices for Styled Components within React components.",
    "tech-stack" : "React Styled Components",
    "domain" : "Styled Components Best Practices General",
    "link" : "rules/react-styled-components-cursorrules-prompt-file/styled-components-best-practices---general.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Mandates the usage of UV when installing dependencies to ensure consistency and efficiency across all environments.",
    "tech-stack" : "Python Developer",
    "domain" : "Dependencies Management Rules",
    "link" : "rules/python-developer-cursorrules-prompt-file/dependencies-management-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets the tone for a python developer with expertise in python, command-line tools and file system operations.",
    "tech-stack" : "Python Developer",
    "domain" : "General Python Development",
    "link" : "rules/python-developer-cursorrules-prompt-file/general-python-development.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides a comprehensive overview of the technologies used in the project to help with understanding the environment.",
    "tech-stack" : "Python Developer",
    "domain" : "Project Technology Stack Context",
    "link" : "rules/python-developer-cursorrules-prompt-file/project-technology-stack-context.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures that all Python code is written using classes instead of functions.",
    "tech-stack" : "Python Developer",
    "domain" : "Python Code Style",
    "link" : "rules/python-developer-cursorrules-prompt-file/python-code-style.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies that the project must always utilize Python version 3.12 for all Python code.",
    "tech-stack" : "Python Developer",
    "domain" : "Python Version",
    "link" : "rules/python-developer-cursorrules-prompt-file/python-version.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies Flutter best practices and coding guidelines to the core directory, focusing on constants, themes, utilities, and widgets.",
    "tech-stack" : "Flutter App Expert",
    "domain" : "Flutter Core Rules",
    "link" : "rules/flutter-app-expert-cursorrules-prompt-file/flutter-core-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces clean architecture, BLoC pattern, and state management principles within Flutter feature modules.",
    "tech-stack" : "Flutter App Expert",
    "domain" : "Flutter Feature Rules",
    "link" : "rules/flutter-app-expert-cursorrules-prompt-file/flutter-feature-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general Flutter best practices across the entire project, focusing on architecture, design, and code quality.",
    "tech-stack" : "Flutter App Expert",
    "domain" : "Flutter General Best Practices",
    "link" : "rules/flutter-app-expert-cursorrules-prompt-file/flutter-general-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides performance-related guidelines for Flutter development, including image caching, list view optimization, and memory management.",
    "tech-stack" : "Flutter App Expert",
    "domain" : "Flutter Performance Rules",
    "link" : "rules/flutter-app-expert-cursorrules-prompt-file/flutter-performance-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Focuses on UI-related rules within Flutter feature's presentation layer, including BLoC, pages, and widgets.",
    "tech-stack" : "Flutter App Expert",
    "domain" : "Flutter Presentation Rules",
    "link" : "rules/flutter-app-expert-cursorrules-prompt-file/flutter-presentation-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies testing guidelines for Flutter projects, covering unit, widget, and integration tests.",
    "tech-stack" : "Flutter App Expert",
    "domain" : "Flutter Testing Rules",
    "link" : "rules/flutter-app-expert-cursorrules-prompt-file/flutter-testing-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for proper API usage within Chrome extensions, ensuring compatibility and best practices.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Api Usage Rules",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/api-usage-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for all Chrome extension files, including JavaScript, HTML, CSS, and manifest files.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Chrome Extension General Rules",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/chrome-extension-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific rules related to the Chrome extension manifest file, ensuring proper structure and content.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Chrome Extension Manifest Rules",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/chrome-extension-manifest-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for the overall development process of Chrome extensions, including testing, debugging, and publishing.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Development Process Rules",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/development-process-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for structuring the architecture of a Chrome extension, focusing on modularity and maintainability.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Extension Architecture Guidelines",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/extension-architecture-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for internationalizing Chrome extensions to support multiple languages.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Internationalization Rules",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/internationalization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for JavaScript code style, naming conventions, and general usage within Chrome extensions.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Javascript Code Style And Structure",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/javascript-code-style-and-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for optimizing the performance of Chrome extensions, covering aspects like efficient code and resource usage.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Performance Optimization Rules",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/performance-optimization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for publishing Chrome extensions to the Chrome Web Store, ensuring proper submission guidelines are followed.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Publishing Rules",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/publishing-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for secure coding practices within Chrome extensions to prevent vulnerabilities.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Security Practices",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/security-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for testing and debugging Chrome extensions to ensure quality and stability.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Testing And Debugging Rules",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/testing-and-debugging-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for developing the user interface and styling of Chrome extensions, ensuring a consistent look and feel.",
    "tech-stack" : "Javascript Chrome Apis",
    "domain" : "Ui And Styling Rules",
    "link" : "rules/javascript-chrome-apis-cursorrules-prompt-file/ui-and-styling-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets the project for asking for clarification when tasks are unclear.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Clarification Requirement",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/clarification-requirement.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Establish a professional and concise style for all AI communication and output.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Communication Tone",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/communication-tone.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Configure the behaviour for the handler of incomplete tasks.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Handle Incomplete Tasks",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/handle-incomplete-tasks.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the setuptools build tool for the project",
    "tech-stack" : "Python Github Setup",
    "domain" : "Project Specific Build Tool",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/project-specific-build-tool.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies the pytest framework for all tests under the tests directory",
    "tech-stack" : "Python Github Setup",
    "domain" : "Project Specific Testing Framework",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/project-specific-testing-framework.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines the desired verbosity level for the project's applications.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Project Verbosity Level",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/project-verbosity-level.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines architectural patterns and principles for Python projects, including modular design, Single Responsibility, and DRY.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Architecture",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-architecture.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets code formatting rules for Python projects using Black and Pylint and following PEP 8.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Code Formatting",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-code-formatting.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies code review requirements for Python projects, including requiring reviews and using GitHub Pull Requests.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Code Review",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-code-review.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines configuration management practices for Python projects, including using .env files and python-dotenv.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Configuration Management",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-configuration-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines dependency management practices for Python projects, including using pip and Semantic Versioning.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Dependency Management",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-dependency-management.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets documentation requirements for Python code, including requiring docstrings and following the Google Python Style Guide.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Documentation",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-documentation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines Python error handling preferences, including using try-except blocks and logging errors.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Error Handling",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-error-handling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces general Python coding style guidelines including indentation, line length, and commenting style.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python General Coding Style",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-general-coding-style.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Configures logging practices for Python applications, including using the Python logging module and defining log levels.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Logging",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-logging.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies monitoring practices for Python applications, including monitoring file processing time, classification accuracy, and error rate.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Monitoring",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-monitoring.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies Python naming conventions for variables, functions, classes, interfaces, and files.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Naming Conventions",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces security best practices for Python code, including requiring HTTPS, input sanitization, and using environment variables.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Security",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-security.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specifies requirements for testing Python code, including requiring tests, coverage targets, and test types.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Testing",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-testing.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Outlines version control practices for Python projects, including using Git, GitHub Flow, and Conventional Commits.",
    "tech-stack" : "Python Github Setup",
    "domain" : "Python Version Control",
    "link" : "rules/python-github-setup-cursorrules-prompt-file/python-version-control.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Configures the AI to act as a full-stack developer with expertise in React, TypeScript, PHP, Symfony, and Docker.",
    "tech-stack" : "React TS/TypeScript Symfony",
    "domain" : "Full Stack Developer Persona",
    "link" : "rules/react-typescript-symfony-cursorrules-prompt-file/full-stack-developer-persona.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets the AI's persona as an expert programming assistant focused on producing clean and readable code across the project.",
    "tech-stack" : "React TS/TypeScript Symfony",
    "domain" : "General Ai Programming Assistant",
    "link" : "rules/react-typescript-symfony-cursorrules-prompt-file/general-ai-programming-assistant.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures the AI uses the latest stable versions of programming languages and adheres to current best practices in all files.",
    "tech-stack" : "React TS/TypeScript Symfony",
    "domain" : "Latest Language Versions And Best Practices",
    "link" : "rules/react-typescript-symfony-cursorrules-prompt-file/latest-language-versions-and-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Instructs the AI to provide accurate, factual, and thoughtful answers, emphasizing reasoning and accuracy in all contexts.",
    "tech-stack" : "React TS/TypeScript Symfony",
    "domain" : "Thoughtful And Accurate Responses",
    "link" : "rules/react-typescript-symfony-cursorrules-prompt-file/thoughtful-and-accurate-responses.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides additional instructions for HTMX and Flask, primarily related to templating.",
    "tech-stack" : "Htmx Flask",
    "domain" : "Additional Htmx And Flask Instructions",
    "link" : "rules/htmx-flask-cursorrules-prompt-file/additional-htmx-and-flask-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces a standard folder structure for Flask projects with Python files.",
    "tech-stack" : "Htmx Flask",
    "domain" : "Flask Folder Structure",
    "link" : "rules/htmx-flask-cursorrules-prompt-file/flask-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies best practices for HTMX and Flask development within the app directory.",
    "tech-stack" : "Htmx Flask",
    "domain" : "Htmx And Flask Best Practices",
    "link" : "rules/htmx-flask-cursorrules-prompt-file/htmx-and-flask-best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guides the integration of `ai-sdk-rsc` into React Server Components for managing state and streaming generative content.",
    "tech-stack" : "Next.js Vercel TS/TypeScript",
    "domain" : "Ai Sdk Rsc Integration Rules",
    "link" : "rules/nextjs-vercel-typescript-cursorrules-prompt-file/ai-sdk-rsc-integration-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General guidance to the project for consistent code style and organization.",
    "tech-stack" : "Next.js Vercel TS/TypeScript",
    "domain" : "General Project Rules",
    "link" : "rules/nextjs-vercel-typescript-cursorrules-prompt-file/general-project-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general TypeScript coding standards and best practices across the project.",
    "tech-stack" : "Next.js Vercel TS/TypeScript",
    "domain" : "General Typescript Rules",
    "link" : "rules/nextjs-vercel-typescript-cursorrules-prompt-file/general-typescript-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules for optimizing images within React components to improve performance.",
    "tech-stack" : "Next.js Vercel TS/TypeScript",
    "domain" : "Image Optimization Rules",
    "link" : "rules/nextjs-vercel-typescript-cursorrules-prompt-file/image-optimization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies specifically to the `middleware.ts` file to manage requests and sessions using Vercel's KV database.",
    "tech-stack" : "Next.js Vercel TS/TypeScript",
    "domain" : "Middleware Implementation Rules",
    "link" : "rules/nextjs-vercel-typescript-cursorrules-prompt-file/middleware-implementation-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines rules specifically for Next.js React Server Components (RSC) within the 'app' directory.",
    "tech-stack" : "Next.js Vercel TS/TypeScript",
    "domain" : "Next Js Server Component Rules",
    "link" : "rules/nextjs-vercel-typescript-cursorrules-prompt-file/next-js-server-component-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for optimizing performance by minimizing client-side operations and using server-side rendering.",
    "tech-stack" : "Next.js Vercel TS/TypeScript",
    "domain" : "Performance Optimization Rules",
    "link" : "rules/nextjs-vercel-typescript-cursorrules-prompt-file/performance-optimization-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces UI and styling conventions using Shadcn UI, Radix UI, and Tailwind CSS for all components.",
    "tech-stack" : "Next.js Vercel TS/TypeScript",
    "domain" : "Ui Component Styling Rules",
    "link" : "rules/nextjs-vercel-typescript-cursorrules-prompt-file/ui-component-styling-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Defines how to interact with Vercel's KV database for storing and retrieving session and application data.",
    "tech-stack" : "Next.js Vercel TS/TypeScript",
    "domain" : "Vercel Kv Database Rules",
    "link" : "rules/nextjs-vercel-typescript-cursorrules-prompt-file/vercel-kv-database-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Instructions for using snippets in Svelte 5 components to create reusable markup.",
    "tech-stack" : "Svelte 5 Vs Svelte 4",
    "domain" : "Svelte 5 Component Structure Snippets",
    "link" : "rules/svelte-5-vs-svelte-4-cursorrules-prompt-file/svelte-5-component-structure---snippets.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General rules for Svelte 5 projects, including using runes for reactivity and simplifying event handlers.",
    "tech-stack" : "Svelte 5 Vs Svelte 4",
    "domain" : "Svelte 5 General Rules",
    "link" : "rules/svelte-5-vs-svelte-4-cursorrules-prompt-file/svelte-5-general-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for handling reactivity and reactive statements in Svelte 5.",
    "tech-stack" : "Svelte 5 Vs Svelte 4",
    "domain" : "Svelte 5 Reactivity Handling",
    "link" : "rules/svelte-5-vs-svelte-4-cursorrules-prompt-file/svelte-5-reactivity-handling.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies Qwik.js best practices for files within the src directory, focusing on lazy-loading, reactive state, data fetching, and side effects.",
    "tech-stack" : "Qwik Basic",
    "domain" : "Qwik Js Best Practices",
    "link" : "rules/qwik-basic-cursorrules-prompt-file/qwik-js---best-practices.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Focuses on error handling, routing with Qwik City, Qwik's optimization features, and lazy-loading for improved performance.",
    "tech-stack" : "Qwik Basic",
    "domain" : "Qwik Js Error Handling Optimization",
    "link" : "rules/qwik-basic-cursorrules-prompt-file/qwik-js---error-handling-optimization.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidelines and the expected folder structure for a Qwik.js project.",
    "tech-stack" : "Qwik Basic",
    "domain" : "Qwik Js Folder Structure",
    "link" : "rules/qwik-basic-cursorrules-prompt-file/qwik-js---folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces general preferences for Qwik.js components in TypeScript files, promoting functional components.",
    "tech-stack" : "Qwik Basic",
    "domain" : "Qwik Js General Preferences",
    "link" : "rules/qwik-basic-cursorrules-prompt-file/qwik-js---general-preferences.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Adheres to Qwik's naming conventions, server-side code execution, and leveraging Vite plugins for optimized builds.",
    "tech-stack" : "Qwik Basic",
    "domain" : "Qwik Js Naming Conventions",
    "link" : "rules/qwik-basic-cursorrules-prompt-file/qwik-js---naming-conventions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Ensures TypeScript is used for all .ts and .tsx files, enhancing type safety in Qwik.js projects.",
    "tech-stack" : "Qwik Basic",
    "domain" : "Qwik Js Typescript Usage",
    "link" : "rules/qwik-basic-cursorrules-prompt-file/qwik-js---typescript-usage.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Specific coding standards and conventions for Laravel package development, covering naming conventions.",
    "tech-stack" : "Laravel PHP 83",
    "domain" : "Laravel Package Coding Standards",
    "link" : "rules/laravel-php-83-cursorrules-prompt-file/laravel-package-coding-standards.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General guidelines for developing Laravel packages, including PHP version, conventions, and tooling.",
    "tech-stack" : "Laravel PHP 83",
    "domain" : "Laravel Package Development Guidelines",
    "link" : "rules/laravel-php-83-cursorrules-prompt-file/laravel-package-development-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidance on package structure and file organization within the Laravel package.",
    "tech-stack" : "Laravel PHP 83",
    "domain" : "Laravel Package Structure",
    "link" : "rules/laravel-php-83-cursorrules-prompt-file/laravel-package-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Outlines the strategy for testing and documentation within the Laravel Package.",
    "tech-stack" : "Laravel PHP 83",
    "domain" : "Laravel Package Testing And Documentation",
    "link" : "rules/laravel-php-83-cursorrules-prompt-file/laravel-package-testing-and-documentation.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Guidelines for README.md file.",
    "tech-stack" : "Laravel PHP 83",
    "domain" : "Readme Md Guidelines",
    "link" : "rules/laravel-php-83-cursorrules-prompt-file/readme-md-guidelines.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general rules to all C# scripts within the Unity project for the tower defense game.",
    "tech-stack" : "Unity Cursor Ai C",
    "domain" : "General C Unity Tower Defense Rules",
    "link" : "rules/unity-cursor-ai-c-cursorrules-prompt-file/general-c-unity-tower-defense-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides guidance specifically related to refactoring the existing tower defense project.",
    "tech-stack" : "Unity Cursor Ai C",
    "domain" : "Refactoring Guidance",
    "link" : "rules/unity-cursor-ai-c-cursorrules-prompt-file/refactoring-guidance.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Sets rules for the part of the project which controls the Ringcon.",
    "tech-stack" : "Unity Cursor Ai C",
    "domain" : "Ringcon Controller Integration Rules",
    "link" : "rules/unity-cursor-ai-c-cursorrules-prompt-file/ringcon-controller-integration-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Rules and constrains regarding the turrets which are part of the tower defense game",
    "tech-stack" : "Unity Cursor Ai C",
    "domain" : "Turret Mechanics Rules",
    "link" : "rules/unity-cursor-ai-c-cursorrules-prompt-file/turret-mechanics-rules.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Provides additional guidelines for HTMX development, focusing on semantic HTML, security, extensions, progressive enhancement, and server-side templating.",
    "tech-stack" : "Htmx Basic",
    "domain" : "Htmx Additional Instructions",
    "link" : "rules/htmx-basic-cursorrules-prompt-file/htmx-additional-instructions.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Applies general HTMX best practices to all HTML files in the project, ensuring consistent use of HTMX attributes for requests, content swapping, and user feedback.",
    "tech-stack" : "Htmx Basic",
    "domain" : "Htmx Best Practices General",
    "link" : "rules/htmx-basic-cursorrules-prompt-file/htmx-best-practices-general.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "Enforces a specific folder structure within the 'src' directory for HTMX projects, promoting organization and maintainability of templates, static assets, and application logic.",
    "tech-stack" : "Htmx Basic",
    "domain" : "Htmx Folder Structure",
    "link" : "rules/htmx-basic-cursorrules-prompt-file/htmx-folder-structure.mdc",
    "component-type" : "mdc"
  }, {
    "description" : "General Python rules to be applied within the 'service-1' directory. Enforces dependency management, Python version, and code structure.",
    "tech-stack" : "Vue 3 Nuxt 3 TS/TypeScript",
    "domain" : "Python General Rules Service 1",
    "link" : "rules/vue-3-nuxt-3-typescript-cursorrules-prompt-file/python-general-rules---service-1.mdc",
    "component-type" : "mdc"
  } ]
}